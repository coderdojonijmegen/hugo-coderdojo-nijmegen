[{"categories":null,"contents":"Wat gaan we doen? We sluiten het jaar muzikaal af: de laatste dojo van het jaar gaan we aan de slag met Sonic Pi. De code die je in dit programma schrijft, knalt vervolgens uit je luidsprekers!\nWe gebruiken voor de dojo het online chatprogramma Jitsi, waardoor de mentoren je gewoon kunnen helpen als je vast komt te zitten bij een opdracht - eigenlijk net als anders dus!\nVoorbereiding Je hebt een computer met een webbrowser nodig, bij voorkeur Google Chrome. Op de pagina van dit evenement zullen we nog extra informatie zetten over hoe je op de workshop kunt voorbereiden.\nSpelregels voor de online dojo Graag willen we vooraf een aantal afspraken met elkaar maken over hoe we online samenwerken.\n De webcam van de deelnemers blijft uit. De kinderen kunnen de mentoren wel zien. Zet je microfoon is uit als je niet aan het woord bent Deel geen persoonlijke informatie Als je een vraag hebt, stel die dan eerst in de chat. Als je hulp nodig hebt met je code, dan vragen we je je scherm te delen en helpen we je verder.  Algemene info Kinderen vanaf 7 jaar kunnen gratis meedoen aan CoderDojo. Het enige wat je nodig hebt om mee te kunnen doen is een laptop met werkende wifi waarop je software mag installeren. Ben je 12 jaar of jonger? Dan vragen we je om één van je ouders mee te nemen om je te begeleiden tijdens de dojo. Verder kan het verstandig zijn om wat te eten mee te nemen, van programmeren krijg je namelijk hongerrrr!\nOm zeker te weten dat we over voldoende spullen beschikken, moet je van tevoren ook even reserveren. Je hebt slechts één ticket per kind nodig. Ouders hoeven geen ticket te reserveren. Denk er wel even aan om je ticket mee te nemen naar CoderDojo (mag digitaal).\nNo show? Ben je de dag zelf verhinderd, laat het dan op tijd weten! Zo kunnen we mensen op de wachtlijst uitnodigen of besluiten één van de mentoren een vrije zaterdag te gunnen. Bij herhaaldelijk niet opdagen zonder afmelding halen we je van de mailinglijst.\n","date":"December 15, 2020","permalink":"/dojos/71-online-muziek-maken-met-sonic-pi/","title":"#71 Online: Muziek Maken Met Sonic Pi"},{"categories":null,"contents":"We gaan programmeren met PHP.\nIntroductie De meestgebruikte programmeertaal voor websites is PHP. Het is een heel handige taal waarmee je een eigen slimme website kunt bouwen.\nJe gaat nu leren hoe PHP werkt, en dat doe je door een online vriendenboek te maken. Je leert informatie op te slaan, hoe je uitrekend hoeveel dagen oud je vrienden zijn, en hoe je een plaatje maakt met hun lievelingskleur.\nBenodigdheden Als je websites wil bouwen met PHP, heb je een plek nodig waar je software kunt schrijven. We gebruiken nu CodeAnywhere. Daar kun je oefenen met PHP, en zie je ook meteen hoe het resultaat eruitziet.\nAls je je niet eerder hebt aangemeld, ga dan naar https://codeanywhere.com/signup. Vul je mailadres in, een wachtwoord, kruis het hokje aan, en klik op \u0026lsquo;register\u0026rsquo;. Open het mailtje dat CodeAnywhere je gestuurd heeft om op de link te klikken. Ga door naar de editor: https://codeanywhere.com/editor.\nIn het scherm dat je daar ziet, vul je eerst je naam in. Bij \u0026lsquo;Search stack\u0026rsquo; vul je PHP7 in, en dan klik je op PHP 7 in de lijst daaronder. Klik onderaan op \u0026lsquo;create\u0026rsquo; en wacht af.\nStappen Je eerste webpagina Als het goed is, zie je nu een omgeving waarin je kunt beginnen aan het maken van je eigen website.\nMaak de eerste pagina aan door in het menu bovenaan te klikken op File, en dan \u0026lsquo;New File\u0026rsquo;. Nu kun je in het grote zwarte vlak in het midden beginnen met je eerste webpagina.\nEen webpagina ziet er in het begin altijd zo uit als hieronder. Kopiëer en plak dit voorbeeld in het zwarte vlak:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Mijn website\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Welkom\u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; In het blokje \u0026lsquo;head\u0026rsquo; staat informatie over je site, zoals de titel. In het blok daaronder, de body, staat alles dat te zien is op de pagina, zoals de kop, tekst en plaatjes.\nDeze indeling met \u0026lt;\u0026gt;-tekens noemen we HTML. Dat is de taal waarmee je opgeeft wat waar op de pagina komt te staan en hoe het eruit ziet.\n\u0026lt;h1\u0026gt; is bijvoorbeeld een HTML-code waarmee je opgeeft dat het een dikgedrukte kop bovenaan de tekst is.\nBewaar je pagina door in het File-menu op \u0026lsquo;Save\u0026rsquo; te klikken. Klik in het venster dat je dan ziet op \u0026lsquo;file name\u0026rsquo; en vul daar in: index.php Klik daaronder op je naam en dan onderaan het venster op \u0026lsquo;Save\u0026rsquo;.\nNu kun je je webpagina bekijken. Klik op de \u0026lsquo;play\u0026rsquo;-knop bovenaan:\nPHP mee laten doen Je website is nu nog heel eenvoudig - en niet zo slim. Hij laat alleen zien wat jij hebt ingetypt.\nJe kunt je webpagina er ook steeds anders uit laten zien, door PHP te gebruiken. De programmacodes van PHP kun je gewoon tussen de HTML-code zetten.\nVoeg deze regel toe aan je webpagina, direct onder de regel met :\n\u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hallo wereld\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt;  Zo dus:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Mijn website\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Welkom\u0026lt;/h1\u0026gt; \u0026lt;?php echo \u0026#39;\u0026lt;p\u0026gt;Hallo wereld\u0026lt;/p\u0026gt;\u0026#39;; ?\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Je laat weten waar de PHP-code begint met . is HTML en geeft aan waar een nieuwe alinea begint. Zoals de meeste codes in HTML sluit je die ook weer af, met . En klik weer op \u0026lsquo;play\u0026rsquo;.\nHet enige dat je PHP nu laat doen, is iets laten zien in de browser (het programma waarmee je de website bekijkt). Gelukkig kun je met PHP nog veel slimmere dingen maken, en dat gaan we nu doen.\nWebsites slimmer maken Eén van de manieren waarop je een webpagina wat slimmer kunt maken, is door PHP een beetje te laten meedenken.\nJe kunt bijvoorbeeld steeds iets anders laten zien op basis van het adres (de url) dat een bezoeker intypt om bij jouw webpagina te komen.\nVerander de PHP-regel uit het vorige voorbeeld zodat dit er komt te staan:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Mijn website\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt; \u0026lt;?php echo \u0026#39;Hallo \u0026#39; . $_REQUEST[\u0026#34;naam\u0026#34;] . \u0026#39;!\u0026#39;; ?\u0026gt; \u0026lt;/h1\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Let erop dat je ook de -codes uit het vorige voorbeeld weghaalt. Let ook op dat de H1-kop pas afsluit ná de PHP-code. De PHP code moet dus tussen en staan.\nPHP zegt nu met het commando echo \u0026lsquo;Hallo\u0026rsquo; tegen een naam die in het webadres van je pagina wordt genoemd. We laten dat zo zien.\nSla je pagina op (via File en Save) en druk weer op \u0026lsquo;play\u0026rsquo;.\nJe ziet nu dat de kop van de pagina is veranderd in \u0026lsquo;Hallo !\u0026rsquo;. Meer niet, want we hebben nog geen naam genoemd in het webadres.\nTik in de adresbalk achter het adres van je site ?naam= en dan je naam. Het zou er ongeveer zo uit moeten zien:\nhttp://jaap-jaap433627.codeanyapp.com/?naam=Steven\nof zo:\nhttp://jaap-jaap433627.codeanyapp.com/index.php?naam=Steven\nDruk op enter om de pagina opnieuw te laden. Probeer het daarna nog een paar keer met een andere naam in het adres.\nFormulieren Wat je nu zou kunnen doen, is een persoonlijke pagina maken voor elk van je vrienden en familieleden. Door een formulier op die pagina te zetten, kunnen zij meer informatie over zichzelf invullen. Zo maak je je eigen online vriendenboek.\nMaak dit formulier:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Vriendenboek van Jaap\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt; \u0026lt;?php echo \u0026#39;Hallo \u0026#39; . $_REQUEST[\u0026#34;naam\u0026#34;] . \u0026#39;!\u0026#39;; ?\u0026gt; \u0026lt;/h1\u0026gt; \u0026lt;form action=\u0026#34;resultaten.php\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;p\u0026gt; Je voornaam: \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;naam\u0026#34; value=\u0026#34;\u0026lt;?php echo $_REQUEST[\u0026#34;naam\u0026#34;]; ?\u0026gt;\u0026#34; /\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; Hoe oud ben je? \u0026lt;input type=\u0026#34;text\u0026#34; name=\u0026#34;leeftijd\u0026#34; /\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;\u0026lt;input type=\u0026#34;submit\u0026#34; value=\u0026#34;Opsturen\u0026#34; /\u0026gt;\u0026lt;/p\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Vul hier je eigen naam in. [bij de titel]\n[als we de naam al weten, dan vult PHP die hier alvast in]\nVoeg zelf nog twee vragen toe voor het vriendenboek: hoe lang ze zijn (in centimeters) en nog iets, zoals bijvoorbeeld wat hun favoriete film is. Let erop dat je elk input-veld een unieke \u0026lsquo;name\u0026rsquo; geeft, dus bijvoorbeeld \u0026lsquo;name=\u0026quot;lengte\u0026rdquo;\u0026rsquo;.\nResultaten van het formulier In de code kun je zien dat het formulier de ingevulde informatie doorgeeft aan een andere pagina die resultaten.php heet. Die pagina gaan we nu aanmaken.\nGa bij CodeAnywhere naar File en klik op \u0026lsquo;New file\u0026rsquo;.\nMaak een pagina die ongeveer lijkt op die hieronder. Denk eraan dat je het antwoord op je zelfbedachte vraag ook nog moet opvangen.\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Vriendenboek van Jaap\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Resultaten\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Hoi \u0026lt;?=$_REQUEST[\u0026#34;naam\u0026#34;]?\u0026gt;, je bent dus \u0026lt;?=$_REQUEST[\u0026#34;leeftijd\u0026#34;]?\u0026gt; jaar oud en \u0026lt;?=$_REQUEST[\u0026#34;lengte\u0026#34;]?\u0026gt; centimeter lang.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; [dit is een iets andere manier om PHP even snel iets in te laten vullen]\nSla je nieuwe pagina op (File, en dan Save) en vul bij \u0026lsquo;file name\u0026rsquo; in resultaten.php Klik daaronder op je naam en klik onderaan op Save. Klik weer op \u0026lsquo;play\u0026rsquo;. Rekenen met PHP De informatie die iemand invult, wordt door PHP opgeslagen in variabelen. Variabel betekent dat iets steeds anders kan zijn. In dit geval kan de variabele \u0026lsquo;leeftijd\u0026rsquo; 4 zijn of 12, maar ook 125 of zelfs een woord zoals \u0026lsquo;slagroomtaart\u0026rsquo;.\nJe kunt ook rekenen met die variabelen.\nDus stel dat iemand heeft ingevuld dat ze 12 is, dan kunnen we uitrekenen wat haar geboortejaar is.\nVoeg deze regels toe aan resultaten.php:\n\u0026lt;?php $leeftijd = $_REQUEST[\u0026#34;leeftijd\u0026#34;]; $jaar = 2018; echo \u0026#34;\u0026lt;p\u0026gt;Dat betekent dat je geboren bent in \u0026#34;; echo $jaar - $leeftijd; echo \u0026#34;.\u0026lt;/p\u0026gt;\u0026#34;; ?\u0026gt;  En bekijken het resultaat door deze pagina op te slaan en je eerste pagina weer te starten.\nVoeg nu zelf de code toe om met PHP te laten zien hoeveel centimeter deze vriend of vriendin langer of korter is dan jij bent. Informatie bewaren: cookies Informatie verzamelen met formuleren en die gegevens opslaan in variabelen is leuk, maar het probleem is dat die informatie weg is als je de browser sluit of naar een andere website gaat. Je bezoeker zal dus elke keer dat hij of zij terugkomt opnieuw het formulier moeten invullen.\nWe kunnen dat voorkomen door de informatie op te slaan in cookies (het Engelse woord voor koekjes).\nZet deze code bovenaan in resultaten.php:\n\u0026lt;?php $_COOKIE[\u0026#39;bezoek\u0026#39;]++; setcookie(\u0026#39;bezoek\u0026#39;, $_COOKIE[\u0026#39;bezoek\u0026#39;]); ?\u0026gt;  Het werkt alleen als je deze code vóór zet, dus dat er niks voor de code naar de browser wordt gestuurd om te laten zien. Zet nu deze regel onderaan de pagina, net boven : \u0026lt;small\u0026gt; Je hebt deze pagina nu \u0026lt;?=$_COOKIE[\u0026#39;bezoek\u0026#39;]?\u0026gt; keer bekeken. \u0026lt;/small\u0026gt; \n[de -code maakt de tekst iets kleiner dan de rest]\nVernieuw de pagina een paar keer en je zult zien dat de informatie uit de cookie steeds opnieuw wordt bijgewerkt en onthouden.\nZoals het er nu staat, wordt de cookie ook weer weggegooid als de bezoeker de browser afsluit. Als je wil dat hij of zij de informatie nog wat langer zal kunnen zien, dan moet je de cookie zo opslaan: setcookie(\u0026#39;bezoek\u0026#39;, $_COOKIE[\u0026#39;bezoek\u0026#39;], time() + 600000); \nOp die manier blijft de informatie bewaard tot 600.000 seconden na nu, oftewel een week.\nInformatie bewaren: tekstbestandjes Als we echt een vriendenboek willen maken, dan moet de site informatie kunnen opslaan, zodat jij de informatie van je vrienden ook kunt lezen.\nProgrammeurs die websites bouwen, gebruiken meestal een database om informatie te bewaren, maar je kunt daar ook een simpel tekstbestandje voor gebruiken.\nDat werkt als volgt. In resultaten.php, onder de regel met setcookie, zetten we de antwoorden uit het formulier achter elkaar en zetten we die in een tekstbestandje:\n$tekstbestandje = \u0026#39;/tmp/vrienden.txt\u0026#39;; $antwoorden = $_REQUEST[\u0026#34;naam\u0026#34;] . \u0026#34;;\u0026#34; . $_REQUEST[\u0026#34;leeftijd\u0026#34;] . \u0026#34;;\u0026#34; . $_REQUEST[\u0026#34;lengte\u0026#34;] . \u0026#34;\\n\u0026#34;; file_put_contents($tekstbestandje, $antwoorden, FILE_APPEND);  [Met de punt (.) plakken we in PHP variabelen en tekst aan elkaar. De \\n op het eind zorgt ervoor dat er na deze rij een nieuwe regel komt.]\n[FILE_APPEND zorgt ervoor dat we steeds een nieuwe regel toevoegen aan het tekstbestandje, in plaats van dat de antwoorden het enige zijn dat erin komt te staan]\nVoeg je eigen variabelen toe aan $antwoorden (die van de extra vragen die je in het formulier hebt gezet). Zorg er wel voor dat er steeds weer een puntkomma tussen komt te staan, want zo houden we de variabelen uit elkaar.\nTekstbestand lezen Nu gaan we een pagina maken waar je ziet wie jouw vragenlijst hebben ingevuld.\nGa bij CodeAnywhere naar File en klik op \u0026lsquo;New file\u0026rsquo;. Zet deze code erin om het tekstbestand te lezen en te laten zien wat erin staat:\n\u0026lt;html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;title\u0026gt;Vriendenboek van Jaap\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Vrienden\u0026lt;/h1\u0026gt; \u0026lt;?php $tekstbestand = fopen(\u0026#34;/tmp/vrienden.txt\u0026#34;, \u0026#34;r\u0026#34;); while( ! feof($tekstbestand) ) { $vriend = explode(\u0026#34;;\u0026#34;, fgets($tekstbestand)); echo $vriend[0] . \u0026#34; is \u0026#34; . $vriend[1] . \u0026#34; jaar en $vriend[2] cm lang.\u0026lt;br\u0026gt;\u0026#34;; } fclose($tekstbestand); ?\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  [Het uitroepteken betekent \u0026lsquo;niet\u0026rsquo;, feof betekent \u0026lsquo;het eind van het bestand\u0026rsquo; en fgets betekent \u0026lsquo;haal een nieuwe regel van het bestand op\u0026rsquo;. Hier staat dus: laat een nieuwe regel zien zolang we nog niet onderaan het tekstbestand zijn.]\n[Met \u0026lsquo;explode\u0026rsquo; hakken we de regel in stukjes. Waar een puntkomma staat begint een nieuwe variabele. $vriend wordt zo een lijst en dat noemen we in PHP een array. De lijst is genummerd en begint bij 0, en daarom vinden we de naam met $vriend[0]. ]\nSla je nieuwe pagina op (File, en dan Save) en vul bij \u0026lsquo;file name\u0026rsquo; in vrienden.php Klik daaronder op je naam en klik onderaan op Save. Klik weer op \u0026lsquo;play\u0026rsquo;.\nGa naar je nieuwste pagina door achter het webadres /vrienden.php te zetten en op enter te drukken.\nHet adres zou er ongeveer zo uit moeten zien:\nhttp://jaap-jaap433627.codeanyapp.com/vrienden.php\nAls je ziet wat je zelf daarstraks hebt ingevuld in het formulier, dan werkt het! Ga terug naar de eerste pagina om het formulier nog een paar keer in te vullen, om alles te testen.\nJaren en dagen Dit deel is nog niet af :(\n[Aantal dagen uitrekenen tot je verjaardag, hoeveel dagen je al leeft, hoeveel Saturnus-jaren je al bent, hoeveel dagen je ouder of jonger bent dan je vriend. \u0026gt; formulier aanpassen zodat we ook de dag van de maand en de maand hebben voor de geboortedatum \u0026gt; Datetime-object maken \u0026gt; link naar info over rekenen met data (zodat we ook leren hoe je documentatie over functies kunt vinden op PHP.org) ]  Hyperlinks Dit deel is nog niet af :(\n[unordered list maken met voor elke vriend een aparte link naar een nieuw bestand, waar we alle info laten zien over die vriend op basis van de meegegeven naam-parameter. Op die pagina moeten we dus met while en if bekijken welke regel van het bestand we moeten gebruiken.]  Plaatjes maken met PHP Dit deel is nog niet af :(\n[plaatje met lievelingskleur genereren \u0026gt; formulier aanpassen zodat we ook de lievelingskleur weten \u0026gt;  To do:  een mail sturen sturen met iemands eigen url (zou je ook kunnen doen als iemand jarig is of een nieuwe entry wordt gedaan) mensen in laten loggen met een wachtwoord tekst aanpassen aan of het ochtend of middag is  Vervolg Meer informatie:\n https://stackoverflow.com/questions/441087/php-exercises https://www.phphulp.nl/php/tutorial/overig/php-beginners-handleiding/575/variabelen/1482/ https://www.phphulp.nl/php/tutorials/php-functies/6/ https://www.w3resource.com/php-exercises/php-basic-exercises.php  Licentie Deze instructies worden, net als alle andere instructies van CoderDojo Nijmegen, aangeboden onder een Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Licentie.  ","date":"November 18, 2020","permalink":"/instructies/web-development-php/","title":"Web - Development - Php"},{"categories":null,"contents":"Wat gaan we doen? Deze maand gaan we met de talen van het Internet aan de gang: HTML, CSS en JavaScript om meer te leren over hoe je inhoud geeft aan een webpagina, hoe je deze er mooi uit kunt laten zien en hoe je er acties aan kunt toevoegen.\nWe gebruiken voor de dojo het online chatprogramma Jitsi, waardoor de mentoren je gewoon kunnen helpen als je vast komt te zitten bij een opdracht - eigenlijk net als anders dus!\nVoorbereiding Je hebt een computer met een webbrowser nodig, bij voorkeur Google Chrome. Op de pagina van dit evenement zullen we nog extra informatie zetten over over hoe je op de workshop kunt voorbereiden.\nSpelregels voor de online dojo Graag willen we vooraf een aantal afspraken met elkaar maken over hoe we online samenwerken.\n De webcam van de deelnemers blijft uit. De kinderen kunnen de mentoren wel zien. Zet je microfoon is uit als je niet aan het woord bent Deel geen persoonlijke informatie Als je een vraag hebt, stel die dan eerst in de chat. Als je hulp nodig hebt met je code, dan vragen we je je scherm te delen en helpen we je verder.  Algemene info Kinderen vanaf 7 jaar kunnen gratis meedoen aan CoderDojo. Het enige wat je nodig hebt om mee te kunnen doen is een laptop met werkende wifi waarop je software mag installeren. Ben je 12 jaar of jonger? Dan vragen we je om één van je ouders mee te nemen om je te begeleiden tijdens de dojo. Verder kan het verstandig zijn om wat te eten mee te nemen, van programmeren krijg je namelijk hongerrrr!\nOm zeker te weten dat we over voldoende spullen beschikken, moet je van tevoren ook even reserveren. Je hebt slechts één ticket per kind nodig. Ouders hoeven geen ticket te reserveren. Denk er wel even aan om je ticket mee te nemen naar CoderDojo (mag digitaal).\nNo show? Ben je de dag zelf verhinderd, laat het dan op tijd weten! Zo kunnen we mensen op de wachtlijst uitnodigen of besluiten één van de mentoren een vrije zaterdag te gunnen. Bij herhaaldelijk niet opdagen zonder afmelding halen we je van de mailinglijst.\n","date":"October 27, 2020","permalink":"/dojos/70-online-web-development/","title":"#70 Online: Web Development"},{"categories":null,"contents":"Er zijn een paar verschillende talen die samen voor een belangrijk deel bepalen wat er op websites staat (HTML), hoe ze eruit zien (CSS) en hoe ze werken (JavaScript).\nIntroductie Deze instructies leggen eerst de basisonderdelen van HTML uit, en gaan daarna in op CSS en JavaScript. Afhankelijk je ervaring met deze talen kun je het best bij het begin starten, of ervoor kiezen dit over te slaan. De instructies bestaan uit een deel uitleg met tussendoor opdrachten om te oefenen met alle onderdelen.\nBenodigdheden Voor deze instructies gebruiken we Visual Studio Code (VS Code) om de code te schrijven, en om het resultaat te bekijken. Download en installeer eerst VS Code: Download Visual Studio Code\n Ga nu naar het Extensions menu. Zoek naar de extensie HTML Preview. Installeer de extensie en herstart VS Code.  Om een html-pagina te laten zien in VS Code moet je op het preview icoon klikken, dit bevindt zich rechtsboven in het scherm (let op: het is alleen zichtbaar als je een bestand van het soort .html open hebt, niet bij bijvoorbeeld een .txt bestand):\nJe bent nu klaar om te beginnen met de instructies!\nOnderdelen van een HTML-pagina (basis) Structuur van een pagina Websites worden geschreven in de taal van het internet: HTML. Er zijn veel verschillende \u0026ldquo;woorden\u0026rdquo;, of \u0026ldquo;bouwblokken\u0026rdquo;, in HTML. Een aantal van de meest gebruikte leer je hier kennen.\nEen HTML-pagina heeft een paar standaard onderdelen:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Dit is een kop\u0026lt;/h1\u0026gt; \u0026lt;p\u0026gt;Dit is een alinea.\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt;  HTML onderdelen worden aangegeven met tags: de naam van het onderdeel tussen \u0026lt;\u0026gt; haakjes. De meeste onderdelen hebben een start en een eind tag. De eind tag heeft een forward slash dus / voor de naam, bijvoorbeeld \u0026lt;/html\u0026gt;. Tags worden altijd geschreven met kleine letters.  Opdracht Kopieer en plak de basisonderdelen in een nieuw bestand en sla dit op als html-bestand (bijvoorbeeld ninja.html). Let op: pas nadat je het bestand hebt opgeslagen krijgt de tekst ook verschillende kleuren. Als je deze kleuren niet ziet kan het zijn dat je het bestand als tekst, dus eindigend op .txt hebt opgeslagen. Zet nu ook de preview aan. Het resultaat zou er ongeveer zo uit moeten zien:\nDit is een kop Dit is een alinea.\n De standaard onderdelen  \u0026lt;html\u0026gt;: dit is het hoofdonderdeel van een pagina. Alle andere onderdelen komen binnen de \u0026lt;html\u0026gt;\u0026lt;/html\u0026gt; \u0026lt;head\u0026gt;: binnen dit onderdeel wordt informatie over de pagina gezet, bijvoorbeeld de titel. \u0026lt;body\u0026gt;: binnen dit onderdeel staat alle tekst die zichtbaar is op de pagina, in het voorbeeld een kop \u0026lt;h1\u0026gt; en een alinea \u0026lt;p\u0026gt;.  Opdracht Voeg eens een alinea met als tekst je naam in de \u0026lt;body\u0026gt; van de pagina toe. Zie je je naam verschijnen?\nKoppen Om verschillende niveau\u0026rsquo;s aan te geven op een pagina kun je koppen gebruiken. Hiervoor zijn de \u0026lt;h1\u0026gt;, \u0026lt;h2\u0026gt;, \u0026lt;h3\u0026gt; (enzovoort) tags. Met deze tags kun je je pagina een duidelijke indeling geven, zoals je kunt zien in het voorbeeld hierboven.\nOpdracht Tot hoe ver gaan de niveau\u0026rsquo;s eigenlijk? Bestaat \u0026lt;h20\u0026gt;?\nOpdracht Maak een pagina die er zo uitziet:\nHeelal Melkwegstelsel Zonnestelsel Aarde  De stijl van tekst Je kunt op een aantal manieren tekst extra benadrukken: door woorden dik te maken, of schuin. Hiervoor kun je bijvoorbeeld de tags \u0026lt;b\u0026gt; (voor dik) en \u0026lt;i\u0026gt; (voor schuin) gebruiken. Een aantal andere tags om extra effect aan je tekst te geven zijn \u0026lt;mark\u0026gt; en \u0026lt;del\u0026gt;. De HTML-code\nDit is \u0026lt;b\u0026gt;dik\u0026lt;/b\u0026gt; wordt dus\nDit is dik  Opdracht Gebruik de onderdelen die hierboven genoemd zijn eens uit en maak deze zin na (zet deze bijvoorbeeld onder de kop Aarde):\nDe dikke gele bij vloog schuin over mijn kop hoofd.  Links Een superbelangrijk onderdeel van webpagina\u0026rsquo;s zijn natuurlijk links die verwijzen naar andere pagina\u0026rsquo;s, op dezelfde site of op een andere. Denk maar eens aan zoekmachines! Voor het maken van een link gebruik je de \u0026lt;a\u0026gt; tag. Het adres van de link, dus waar deze naar verwijst, voeg je toe door het attribuut href in de tag te zetten met als waarde het adres, op deze manier:\n\u0026lt;a href=\u0026#34;https://scratch.mit.edu\u0026#34;\u0026gt; Opdracht Probeer op deze manier maar eens een link naar je favoriete website te maken. Let op: vergeet niet de aanhalingstekens om het adres van de website.\nZie je de link niet? Dat komt omdat je nog niets hebt toegevoegd om op te klikken! Dit komt tussen de start- en eindtag en mag tekst zijn, maar ook bijvoorbeeld een afbeelding.\nOpdracht Maak op de pagina een link naar je favoriete website met de tekst \u0026ldquo;Mijn favoriete website!\u0026rdquo; (let op: de tekst is dik gedrukt, hoe moest dat ook weer?). Werkt de link? Tip: zet in de link https:// voor de naam van de website.\nPlaatjes Met alleen maar tekst zouden veel websites er maar saai uit zien. Plaatjes kun je toevoegen aan je pagina met de \u0026lt;img\u0026gt; tag. Ook hier heb je weer een attribuut nodig, dat heet src (van source, Engels voor bron):\n\u0026lt;img src=\u0026#34;naam-van-het-plaatje.png\u0026#34;\u0026gt; Opdracht: Pas de link van de vorige opdracht zo aan dat je het CoderDojo logo hieronder gebruikt in plaats van de tekst die er staat. Download Hiervoor het plaatje en sla het op in de map waar ook je html-pagina staat. Werkt de link nu ook weer? Let op: je moet de hele naam van het plaatje gebruiken, in dit geval is het een png-bestand.\nStijl toevoegen met CSS (basis) Zonder stijl heeft tekst op een webpagina een standaardkleur (zwarte letters op een witte achtergrond), standaardgrootte en standaardlettertype. Je kunt eindeloos variëren met stijl, en er zijn verschillende manieren om stijl toe te voegen aan je HTML.\nDe opdrachten in deze instructie beginnen met deze HTML-code:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt; Dit is de best gestijlde regel HTML ooit! \u0026lt;/p\u0026gt; \u0026lt;p\u0026gt; Hoewel, misschien is deze nog wel mooier... \u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Dit zou er in de preview zo uit moeten zien:\n Dit is de best gestijlde regel HTML ooit!  Hoewel, misschien is deze nog wel mooier...  Stijl toevoegen De makkelijkste manier om stijl toe te voegen aan je HTML is door een style attribuut toe te voegen aan een HTML-element, bijvoorbeeld:\n\u0026lt;p style=\u0026#34;color:red\u0026#34;\u0026gt;Wat zou de kleur van deze tekst zijn?\u0026lt;/p\u0026gt; In dit voorbeeld is color de eigenschap die je wilt instellen, namelijk de kleur van de tekst. De waarde die je de tekst geeft is hier red, dus rood.\nSpelen met kleur De kleur van tekst bepaal je met de eigenschap color: \u0026lt;p style=\u0026quot;color:green\u0026quot;\u0026gt;. Kleuren instellen kan op verschillende manieren, bekijk hiervoor het onderdeel :ref:html-kleuren.\nOpdracht Maak de tekst van de eerste alinea groen, en die van de tweede paars:\nDit is de best gestijlde regel HTML ooit!\nHoewel, misschien is deze nog wel mooier...\n Je kunt niet alleen de kleur van de tekst zelf, maar ook de achtergrond veranderen, dit doe je met de eigenschap background-color: \u0026lt;p style=\u0026quot;background-color:....\u0026quot;\u0026gt;.\nOpdracht Maak de tekst van de eerste alinea rood met een zwarte achtergrond, en die van de wit met een oranje achtergrond:\nDit is de best gestijlde regel HTML ooit!\nHoewel, misschien is deze nog wel mooier...\n Tekstgrootte aanpassen Eén manier om letters van verschillende grootte te maken is door :ref:koppen te gebruiken. Dat is niet altijd handig (waarom is nu niet belangrijk) en het kan ook met de eigenschap font-size. Een voorbeeld:\n\u0026lt;p style=\u0026#34;font-size:25px\u0026#34;\u0026gt;Groot!\u0026lt;/p\u0026gt; geeft dit resultaat\nGroot!\n In dit voorbeeld is px gebruikt om aan te geven hoe groot de tekst moet zijn, dit is de grootte in pixels op het scherm. Je kunt ook procenten gebruiken, waarbij 100% de \u0026ldquo;standaard\u0026rdquo; grootte is: \u0026lt;p style=\u0026quot;font-size:100%\u0026quot;\u0026gt;.\nOpdracht Maak de eerste zin van je pagina zo groot dat ie nog net op één regel past, en de tweede zo klein dat je \u0026rsquo;m nog nét kunt lezen.\nVerschillende soorten letters gebruiken Naast de kleur en de grootte kun je ook nog het soort letters veranderen. Dit doe je met de eigenschap font-family: \u0026lt;style=\u0026quot;font-family:naam,backup-naam\u0026quot;\u0026gt;\nJe ziet dat er naam en backup-naam als waarde staat ingevuld. De soort letter backup-naam is niet verplicht, maar wordt gebruikt als de computer de soort letter naam niet kent. Een voorbeeld:\n\u0026lt;p style=\u0026#34;font-family:broadway,serif\u0026#34;\u0026gt;Broadway is niet zo goed te lezen.\u0026lt;/p\u0026gt; \u0026lt;p style=\u0026#34;font-family:verdana,sans-serif\u0026#34;\u0026gt;Verdana een stuk beter.\u0026lt;/p\u0026gt; geeft dit resultaat\nBroadway is niet zo goed te lezen.\nVerdana een stuk beter.\n Stijlen combineren Je kun meer dan één eigenschap tegelijk instellen door ze met een punt-komma achter elkaar te zetten, bijvoorbeeld: \u0026lt;p style=\u0026quot;color:red;font-size:20px\u0026quot;\u0026gt;\nOpdracht Combineer nu in de twee zinnen verschillende kleuren, lettergroottes en soorten letters. Leef je uit!\nToegankelijkheid Je hebt nu gezien dat je tekst op je webpagina er op heel veel verschillende manieren kunt laten uitzien. Dat het kán betekent natuurlijk nog niet dat het ook móét! Om te zorgen dat websites ook voor mensen die bijvoorbeeld minder goed zien te gebruiken zijn is het belangrijk (en voor sommige websites verplicht!) om bijvoorbeeld\n de letters groot genoeg te maken de kleur van de letters en die van de achtergrond verschillend genoeg te maken genoeg ruimte tussen regels tekst te laten.  Actie toevoegen met JavaScript (basis) De HTML die je net hebt geleerd is statisch. Om hier acties aan toe te voegen, zoals het klikken van een knop gebruiken we JavaScript (JS). Net zoals HTML kent ook JS veel verschillende \u0026ldquo;woorden\u0026rdquo;. Hier behandelen we er een aantal.\nToevoegen aan een HTML bestand JS wordt voor HTML bestanden geschreven in een speciaal blok:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;script\u0026gt; JavaScript code hier! \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Dit ziet er als volgt uit met code (De code wordt verder toegelicht):\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;script\u0026gt; const telOp = function(getal1, getal2) { return getal1+getal2; } const resultaat = telOp(1,2); console.log(resultaat); \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Functies Een functie in JS ziet er als volgt uit:\nconst telOp = function(getal1, getal2) { return getal1+getal2; }  Hierbij zie je dat function aangeeft dat het een \u0026lsquo;functie\u0026rsquo; is. Vervolgens geven we de parameters op. Bij ons zijn dat getal1 en getal2. Als laatst gebruiken we deze twee variabelen om een optelling te doen. We geven dit getal terug door return te gebruiken.\nAls we dit stukje code als volgt aanroepen:\nconst resultaat = telOp(1,2); console.log(resultaat)  Dan zien we dat er 3 wordt geprint! We slaan hierbij het resultaat op in resultaat en printen die vervolgens met console.log(). Om nu de output te zien van de console.log() functie moeten we de console openen. Je kunt dit doen op verschillende manieren:\nWindows:\n F12 Rechtermuisknop + inspecteer Control+Shift+J  MacOs:\n Command+Option+J  Variabelen Variabelen in JS gebruiken net als andere talen een speciale syntax. In JS kennen we var, const en let. Een goede tip om problemen tegen te gaan is om alleen const en let te gebruiken.\nconst gebruiken we als een variabelen niet meer veranderd, en let als we de variabelen later nog aan willen passen.\nEen variabele resultaat maken doen we als volgt:\nlet resultaat = 6; //Zo  const resultaatConst = 6; //Of zo  In variabelen kunnen we data opslaan, dat is heel handig!\nVoorbeeld 1: Knop Bij een knop gaan we HTML en JS combineren!\nOpdracht Zorg allereest dat je een HTML pagina hebt met een knop.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;button\u0026gt; Klik op mij! \u0026lt;/button\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Wat gebeurt er nu als je op de knop klikt?\nOpdracht Om nu interactie toe te voegen aan de knop gaan we JS en html combineren.\n Op de knop kunnen we de volgende HTML toevoegen: onclick=\u0026rdquo;\u0026quot;. Nu werkt het echter nog niet..! Nu moeten we een JS functie schrijven die de knop aan gaat roepen, weet jij nog waar dit moet staan in het HTML bestand?:  const buttonClicked = function() { alert(\u0026#34;Je hebt op de knop geklikt!\u0026#34;); }   Als laatste gaan we deze twee elementen aan elkaar koppelen door de onclick=\u0026rdquo;\u0026quot; aan te passen (Hier moet je wel de JS nog toevoegen!):  \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;button onclick=\u0026#34;buttonClicked()\u0026#34;\u0026gt; Klik op mij! \u0026lt;/button\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Voorbeeld 2: Een element toevoegen op de pagina We kunnen in JS nog veel meer doen dan interactie toevoegen, bijvoorbeeld aan knoppen. Ook kunnen we HTML toevoegen aan de HTML pagina!\nWe hebben hier een aantal functies voor in JS.\nconst element = document.getElementById(\u0026#34;\u0026lt;id\u0026gt;\u0026#34;); element.insertAdjacentHTML(\u0026#34;afterend\u0026#34;, \u0026#34;\u0026lt;p\u0026gt;My text\u0026lt;/p\u0026gt;\u0026#34;);  Er zijn nog veel meer mogelijkheden, maar dit is een van de simpelste.\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;script\u0026gt; const voegElementToe = function() { const element = document.getElementById(\u0026#34;mijnDivId\u0026#34;); element.insertAdjacentHTML(\u0026#34;afterend\u0026#34;, \u0026#34;\u0026lt;p\u0026gt;My text\u0026lt;/p\u0026gt;\u0026#34;); } \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;button onclick=\u0026#34;voegElementToe()\u0026#34;\u0026gt; Klik op mij! \u0026lt;/button\u0026gt; \u0026lt;div id=\u0026#34;mijnDivId\u0026#34;\u0026gt; Dit is een div\u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Opdracht Kun jij nu met jouw kennis van JS en HTML een element toevoegen als je op een knop klikt?\nVoorbeeld 3: Reageren op berichten van een gebruiker Met de volgende HTML code hebben we een invoer veld waar de gebruiker iets in kan typen:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;style\u0026gt; #inputId { width: 300px; height: 40px; font-size: xx-large; } .container { display: flex; height: 100vh; justify-content: center; align-items: center; background-color: blue; } \u0026lt;/style\u0026gt; \u0026lt;script\u0026gt; //JavaScript code hier!  \u0026lt;/script\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body class=\u0026#34;container\u0026#34;\u0026gt; \u0026lt;span\u0026gt; Wat is je naam? \u0026lt;/span\u0026gt; \u0026lt;input id=\u0026#34;inputId\u0026#34;\u0026gt; \u0026lt;/input\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Als de gebruiker nu iets typt, zie je alleen de tekst staan. Er gebeurt verder nog niet zo veel. Kun jij ervoor zorgen dat de computer terugpraat?\n Voeg een knop toe aan de HTML pagina Als je op de knop klikt, log dan de text die in het input veld staat met console.log. Om de tekst uit het invoer veld te halen kun je gebruik maken van: const input = document.getElementById(\u0026quot;inputId\u0026quot;).value; Kun jij nu de computer Hallo \u0026lt;naam\u0026gt; laten zeggen? Je kan dit doen met de functie alert(), hier moet je nog wel text aan meegeven. Dit is een voorbeeld: alert(\u0026quot;Hoi Kevin!\u0026quot;)  Stijl toevoegen met CSS (vervolg) Maak voor de opdrachten in deze instructie een HTML-bestand met deze inhoud:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;style\u0026gt; /* hier komt je styling! */ \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;h1\u0026gt;Deze pagina gaan we stylen!\u0026lt;/h1\u0026gt; \u0026lt;h2\u0026gt;Dit is een h2 kop\u0026lt;/h2\u0026gt; \u0026lt;div\u0026gt; \u0026lt;h2\u0026gt;Dit is ook een h2 kop!\u0026lt;/h2\u0026gt; \u0026lt;p\u0026gt;Wat zullen we met \u0026lt;span\u0026gt;deze\u0026lt;/span\u0026gt; alinea gaan doen?\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Deze alinea wordt nog mooier dan de vorige.\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;p\u0026gt;De vorige alinea\u0026#39;s zijn \u0026lt;span\u0026gt;jaloers\u0026lt;/span\u0026gt; op mij.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Jaloers op mij zul je bedoelen!\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Tot nu toe heb je stijl toegevoegd door style=\u0026quot;...\u0026quot; te gebruiken in de HTML-onderdelen. Dat heeft voordelen en nadelen. Het is handig dat je meteen kunt zien hoe de inhoud van je webpagina eruit komt te zien. Minder handig is dat je aan ieder stukje HTML op deze manier een stijl moet toevoegen. Dat is én veel werk, én wordt al snel onoverzichtelijk als je veel stijlen hebt.\nHet is daarom gebruikelijk bij webpagina\u0026rsquo;s om de inhoud en stijl op verschillende plekken neer te zetten. Een manier om dit te doen is binnen het \u0026lt;style\u0026gt; onderdeel. De code binnen het \u0026lt;style\u0026gt; onderdeel ziet er wat anders uit dan je tot nu toe gezien hebt. Om tekst rood te maken gebruikte je\n\u0026lt;p style=\u0026#34;color:red\u0026#34;\u0026gt;Dit stukje tekst is rood\u0026lt;/p\u0026gt; Binnen \u0026lt;style\u0026gt; moet je deze code schrijven, een soort regel voor hoe de HTML zich moet gedragen:\np { color: red; } Opdracht Wat denk je dat er gebeurt als je dit stukje code in het \u0026lt;style\u0026gt; onderdeel zet? Probeer het eens. Had je gelijk?\nStijl toevoegen aan sommige, maar niet alle elementen Als je de opdracht van net hebt uitgevoerd, heb je gezien dat alle \u0026lt;p\u0026gt; onderdelen, dus alle alinea\u0026rsquo;s, rode tekst hebben. Dit is dus wat deze code doet:\n de eigenschap kleur krijgt de waarde rood voor alle \u0026lt;p\u0026gt; onderdelen  Maar stel nou dat je alleen bepaalde alinea\u0026rsquo;s rood wilt maken?\nClass Dat kan bijvoorbeeld door het HTML-onderdeel lid te maken van een zogenaamde class:\n\u0026lt;p class=\u0026#34;naamvandeclass\u0026#34;\u0026gt;Welke kleur is dit?\u0026lt;/p\u0026gt; In de CSS maak je een class door een punt aan het begin te gebruiken:\n.naamvandeclass { color: red; }  Opdracht Gebruik een class met de naam \u0026ldquo;rodealinea\u0026rdquo; om de 1e en 4e alinea rood te maken, dus zo:\n  .rodealinea { color: red; }    Deze pagina gaan we stylen! Dit is een h2 kop  Dit is ook een h2 kop! Wat zullen we met deze alinea gaan doen?\nDeze alinea wordt nog mooier dan de vorige.\n  De vorige alinea's zijn jaloers op mij.\nJaloers op mij zul je bedoelen!\n    ID Een andere manier is om een HTML-onderdeel een uniek id te geven:\n\u0026lt;p id=\u0026#34;ikbenuniek\u0026#34;\u0026gt;Welke kleur is dit?\u0026lt;/p\u0026gt; In de CSS verwijs je naar een id door een hashtag aan het begin te gebruiken:\n#ikbenuniek { color: red; } Opdracht Maak de tekst van de eerste h1 kop blauw, en de 1e h2 kop groen (tip: je hebt hiervoor twee id\u0026rsquo;s nodig, \u0026ldquo;ikbenblauw\u0026rdquo; en \u0026ldquo;ikbengroen\u0026rdquo;):\n  .rodealinea { color: red; } #ikbenblauw { color: blue; } #ikbengroen { color: green; }    Deze pagina gaan we stylen! Dit is een h2 kop  Dit is ook een h2 kop! Wat zullen we met deze alinea gaan doen?\nDeze alinea wordt nog mooier dan de vorige.\n  De vorige alinea's zijn jaloers op mij.\nJaloers op mij zul je bedoelen!\n    Samengevat heb je nu gezien dat je stijl kunt geven aan\n alle onderdelen van een bepaalde soort bepaalde onderdelen door ze lid te maken van een class losse onderdelen door ze een (uniek) id te geven  Combineren van stijlen Een grote kracht van CSS is dat je stijlen ook kunt combineren. Zo kun je meerdere eigenschappen tegelijk instellen in een CSS regel:\np { color: red; font-weight: bold; } Opdracht Voeg een tweede eigenschap toe aan de \u0026ldquo;rodealinea\u0026rdquo;, bijvoorbeeld background-color of font-family.\nJe kunt een onderdeel ook lid maken van meer dan één class (in dit voorbeeld heten die \u0026ldquo;rodealinea\u0026rdquo; en \u0026ldquo;box\u0026rdquo;):\n\u0026lt;p class=\u0026#34;rodealinea box\u0026#34; Opdracht Maak een class \u0026ldquo;box\u0026rdquo; die de eigenschap border instelt op 1px solid black, en voeg deze toe aan een van de rode alinea\u0026rsquo;s:\n  .rodealinea { color: red; } #ikbenblauw { color: blue; } #ikbengroen { color: green; } .box { border: 1px solid black; }    Deze pagina gaan we stylen! Dit is een h2 kop  Dit is ook een h2 kop! Wat zullen we met deze alinea gaan doen?\nDeze alinea wordt nog mooier dan de vorige.\n  De vorige alinea's zijn jaloers op mij.\nJaloers op mij zul je bedoelen!\n    Actie toevoegen met JavaScript (vervolg) Nu je de basis van JS hebt gezien, gaan we wat verder met moeilijker onderdelen.\nEen klok maken We gaan een klok maken op een HTML pagina. Je kan de volgende HTML gebruiken:\n\u0026lt;html\u0026gt; \u0026lt;head\u0026gt; \u0026lt;style\u0026gt; body { background: linear-gradient(45deg, #1870ed 0, #f18f88 100%); font-family: \u0026#39;Montserrat\u0026#39;, \u0026#39;sans-serif\u0026#39;; min-height: 100vh; display: flex; align-items: center; justify-content: center; } .clock-container { margin-top: 30px; margin-bottom: 30px; background-color: #080808; border-radius: 5px; padding: 60px 20px; box-shadow: 1px 1px 5px rgba(255, 255, 255, .15), 0 15px 90px 30px rgba(0, 0, 0, .25); display: flex; } .clock-col { text-align: center; margin-right: 40px; margin-left: 40px; min-width: 90px; position: relative; } .clock-col:not(:last-child):before, .clock-col:not(:last-child):after { content: \u0026#34;\u0026#34;; background-color: rgba(201, 166, 166, 0.3); height: 5px; width: 5px; border-radius: 50%; display: block; position: absolute; right: -42px; } .clock-col:not(:last-child):before { top: 35%; } .clock-col:not(:last-child):after { top: 50%; } .clock-timer { color: #fff; font-size: 4.2rem; text-transform: uppercase; } .clock-label { color: rgba(255, 255, 255, .35); text-transform: uppercase; font-size: 0.7rem; margin-top: 10px; } @media (max-width: 825px) { .clock-container { flex-direction: column; padding-top: 40px; padding-bottom: 40px; } .clock-col+.clock-col { margin-top: 20px; } .clock-col:before, .clock-col:after { display: none !important; } } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;clock-container\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;clock-col\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;clock-hours clock-timer\u0026#34; id=\u0026#34;clock-day\u0026#34;\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;clock-label\u0026#34;\u0026gt; Dag \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;clock-col\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;clock-hours clock-timer\u0026#34; id=\u0026#34;clock-hour\u0026#34;\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;clock-label\u0026#34;\u0026gt; Uren \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;clock-col\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;clock-minutes clock-timer\u0026#34; id=\u0026#34;clock-minute\u0026#34;\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;clock-label\u0026#34;\u0026gt; Minuten \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div class=\u0026#34;clock-col\u0026#34;\u0026gt; \u0026lt;p class=\u0026#34;clock-seconds clock-timer\u0026#34; id=\u0026#34;clock-second\u0026#34;\u0026gt; \u0026lt;/p\u0026gt; \u0026lt;p class=\u0026#34;clock-label\u0026#34;\u0026gt; Seconden \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; //Hier moet jij je code gaan schrijven voor de clock!  let dagElement = document.getElementById(\u0026#34;clock-day\u0026#34;); let urenElement = document.getElementById(\u0026#34;clock-hour\u0026#34;); let minutenElement = document.getElementById(\u0026#34;clock-minute\u0026#34;); let secondenElement = document.getElementById(\u0026#34;clock-second\u0026#34;); const dagenInText = [\u0026#34;Zo\u0026#34;, \u0026#34;Ma\u0026#34;, \u0026#34;Di\u0026#34;, \u0026#34;Wo\u0026#34;, \u0026#34;Do\u0026#34;, \u0026#34;Vr\u0026#34;, \u0026#34;Za\u0026#34;]; function updateTime() { var today = new Date(); //Dit geeft je een datum terug,  //hier kun je de uren, minuten en seconden van halen.  //Met getHours() krijg je de uren  //Met getMinutes() krijg je de minuten  //Met getSeconds() krijg je de seconden  //De dag hebben wij voor je gedaan!  dagElement.innerText = dagenInText[today.getDay()]; urenElement.innerText = \u0026#34;1\u0026#34;; minutenElement.innerText = \u0026#34;1\u0026#34;; secondenElement.innerText = \u0026#34;1\u0026#34;; } //Dit voert de functie iedere seconde opnieuw uit,  //De tijd gaat natuurlijk met 1 seconde per keer vooruit!  setInterval(updateTime, 1000); \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; De klok werkt nu nog niet.. Kan jij dit oplossen? In het \u0026lt;script\u0026gt;\u0026lt;/script\u0026gt; blok moet jij de code gaan aanpassen, daarmee kun je de klok weer aanslingeren ;) !\nHet instellen van kleuren op je webpagina Er zijn een een heel aantal manieren om een kleur in te stellen voor onderdelen van je pagina, bijvoorbeeld\n met namen_ \u0026lt;p style=\u0026quot;color:red\u0026quot;\u0026gt; met RGB-waarden_ \u0026lt;p style=\u0026quot;color:rgb(255, 0, 0)\u0026quot;\u0026gt; met HEX-waarden_ \u0026lt;p style=\u0026quot;color:#FF0000\u0026quot;\u0026gt;  Namen Er zijn 140 kleuren die een eigen naam hebben:\nRGB-waarden RGB staat voor Rood Groen Blauw. Dit is ook de volgorde waarmee je ze instelt in de code. De waarde gaat van 0 (helemaal niks van deze kleur) tot 255 (alles van deze kleur). Een paar voorbeelden:\n   RGB code Rood Groen Blauw Kleur     (0, 255, 0) 0 255 0 groen   (255, 0, 255) 255 0 255 magenta   (173, 216, 230) 173 216 230 lichtblauw    HEX-waarden  HEX is een afkorting voor hexadecimaal, wat een manier van tellen is die vaak wordt gebruikt bij computers. In plaats van de 10 cijfers (0 t/m 9) waar we meestal mee tellen tel je hier met 16 \u0026ldquo;cijfers\u0026rdquo;, namelijk 0 t/m 9 en A t/m F. De HEX code voor een kleur is zes cijfers lang: de linker twee bepalen hoeveel rood er in de kleur zit, de middelste twee hoeveel groen en de rechter twee hoeveel blauw. 00 is de laagste waarde (omgerekend 0), FF is de hoogste waarde (omgerekend 255). De zescijferige code staat in de HTML-code na een #.  De kleuren van de RGB-voorbeelden zijn in HEX code\n   HEX code Kleur     00FF00 groen   FF00FF magenta   ADD8E6 lichtblauw    Bronvermelding afbeeldingen  HTML logo by W3C CSS logo by Rudloff JS logo by Omed Habib SVG_Recognized_color_keyword_names by Monaneko  Licentie Deze instructies worden, net als alle andere instructies van CoderDojo Nijmegen, aangeboden onder een Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Licentie.  ","date":"October 22, 2020","permalink":"/instructies/web-development/","title":"Web - Development"},{"categories":null,"contents":"Je gaat met Scratch een \u0026ldquo;space shooter\u0026rdquo; bouwen.\nBenodigdheden Deze opdrachten maak je met Scratch. Als je nog geen account had, maak dit dan eerst aan.\nZet in Scratch eerst de taal op Nederlands via de wereldbol linksboven.\nInleiding In deze opdracht ga je een \u0026ldquo;space shooter\u0026rdquo; spel bouwen, waarbij je een ruimteschip bestuurt dat meteorieten kapot moet schieten of ontwijken. Het spel is gebaseerd op dit project.\nDit zijn de stappen die je gaat programmeren:\n Laat een ruimteschip bewegen met de pijltjestoetsen Maak een bewegende achtergrond waardoor het lijkt alsof je door de ruimte vliegt Laat meteorieten verschijnen en naar het ruimteschip vliegen Zorg dat het ruimteschip op de meteorieten kan schieten  Als je hierna nog zin (en tijd) hebt dan zijn er nog allerlei uitbreidingen mogelijk, denk bijvoorbeeld aan het spel steeds iets moeilijker maken of geluid en andere special effects toevoegen.\nLaat een ruimteschip bewegen met de pijltjestoetsen Eerst moet je een sprite hebben voor je ruimteschip. Je kunt dit natuurlijk zelf ontwerpen, maar ook een bestaande sprite kiezen (bijvoorbeeld het Rocketship). Noem deze sprite ruimteschip.\nZorg er eerst voor dat de sprite niet te groot is ten opzichte van het speelveld. Je kunt dit doen door het blok maak grootte te gebruiken dat je vindt in het menu Uiterlijken. Speel een beetje met het percentage om de goede grootte te vinden. Zorg ook dat het ruimteschip in het midden onderaan begint door het op x = 0 te plaatsen (x loopt van links naar rechts) en y zo in te stellen dat het nog net in beeld is. Je programma zou er nu ongeveer zo uit moeten zien:\nwanneer groene vlag wordt aangeklikt maak grootte (25) % ga naar x: (0) y: (-150)  De beweging van het ruimteschip kun je op verschillende manieren programmeren. Je kunt bijvoorbeeld iedere keer bij het indrukken van pijltje links de sprite een stukje laten opschuiven. Bij dit spel gaat het iets anders: als je op een pijltjestoets drukt dan geef je het ruimteschip een bepaalde snelheid, die vervolgens weer naar 0 (dus stilstaan) gaat. Op deze manier zal het ruimteschip een mooie vloeiende beweging maken. Neem de volgende stappen:\n Maak een variabele x-snelheid aan (in het menu Variabelen). Zet deze snelheid aan het begin van het spel op 0. Verander de snelheid naar een getal groter dan 0 als pijltje rechts wordt ingedrukt, en kleiner dan 0 voor pijltje links. Verander vervolgens de (x-)positie van het ruimteschip met de waarde van de variabele x-snelheid. Laat de snelheid steeds iets verder afnemen tot deze uiteindelijk weer 0 is.  Tip 1: de laatste drie stappen in de lijst hierboven moet je in een herhaal blok zetten.\nTip 2: je kunt de snelheid bijvoorbeeld laten afnemen door er een getal van af te trekken. Een andere manier is om de waarde te vermenigvuldigen met een getal kleiner dan 1.\nKlik om te laten zien hoe je programma er nu ongeveer uit zou moeten zien.  wanneer groene vlag wordt aangeklikt maak grootte (25) % ga naar x: (0) y: (-150) maak [snelheid_x] (0) herhaal als \u0026lt;toets [pijltje links v] ingedrukt?\u0026gt; dan maak [snelheid_x] (5) end als \u0026lt;toets [pijltje rechts v] ingedrukt?\u0026gt; dan maak [snelheid_x] (-5) end verander x met: (snelheid_x) maak [snelheid_x] ((snelheid_x) * (0.9)) end    Maak een bewegende achtergrond Sla dit plaatje voor de achtergrond van het spel op je computer op:\nMaak door de volgende stappen te volgen een sprite van dit plaatje:\n Klik op het icoon voor een nieuwe sprite (rechtsonder, plaatje van de kat) en kies voor Upload sprite. Upload het ruimte-plaatje. Ga naar het tabblad Uiterlijken (linksboven, rechts naast het Code tabblad). Maak in de editor het plaatje net zo groot als het hele speelveld door het op te rekken.  Plaats de ruimte-achtergrond aan het begin van het spel in het midden van het speelveld. Vraag: wat zijn x en y dan?\nKlik om de code te bekijken  wanneer groene vlag wordt aangeklikt ga naar x: (0) y: (0)    Nu ga je de achtergrond laten bewegen zodat het net is of je schip door de ruimte vliegt. Vraag: als je wil dat je schip vooruit vliegt, welke kant moet de achtergrond dan op gaan?\nNet als bij de snelheid van je ruimteschip moet je hier een variabele maken, nu voor de \u0026ldquo;scroll\u0026rdquo; snelheid van de ruimte. Vervolgens verander je steeds de positie van de achtergrond met de snelheid die je hebt ingesteld. Vraag: moet je nu de x of de y veranderen? En moet x of y steeds groter worden? Of juist kleiner?\nKlik om de code te bekijken  wanneer groene vlag wordt aangeklikt ga naar x: (0) y: (0) maak [snelheid_scrollen] (4) herhaal verander y met ((snelheid_scrollen) * (-1)) end    Als je nu het programma start, dan zie je dat er twee dingen fout gaan:\n je achtergrond verdwijnt uit beeld en komt niet meer terug er verschijnt een steeds groter wit vlak!  Een manier om deze twee problemen op te lossen staat beschreven in deze afbeelding:\nWat je ziet is dat je voor deze manier twee achtergronden gebruikt: de sprite, en een kloon van de sprite. De blauwe pijl (1) geeft aan dat de sprite en kloon allebei naar beneden schuiven. De rode pijl (2) laat zien dat zodra een achtergrond beneden uit beeld is verdwenen, je deze moet verplaatsen naar boven het speelveld. Op deze manier zorg je ervoor dat je geen wit vlak meer zult zien! Je moet nu dus een stuk code schrijven dat als de sprite uit beeld is, deze weer naar boven verplaatst. En je moet deze code niet alleen voor de sprite zelf, maar ook voor de kloon van de sprite schrijven.\nTip 1: dit is best een lastig stuk code, probeer het daarom eerst eens alleen voor de sprite, en daarna ook voor de kloon.\nTip 2: denk even goed na over de waarde die y heeft als de achtergrond boven en onder het speelveld is.\nUiteindelijk is dit de code die zorgt voor een bewegende achtergrond.  wanneer groene vlag wordt aangeklikt ga naar x: (0) y: (0) maak een kloon van [mijzelf v] maak [snelheid_scrollen] (4) herhaal als \u0026lt;(y-positie)  (-340)\u0026gt; dan verander y met ((snelheid_scrollen) * (-1)) anders ga naar x: (0) y: (345) end end wanneer ik als kloon start ga naar x: (0) y: (345) maak [snelheid_scrollen] (4) herhaal als \u0026lt;(y-positie)  (-340)\u0026gt; dan verander y met ((snelheid_scrollen) * (-1)) anders ga naar x: (0) y: (345) end end    Laat meteorieten verschijnen en naar het ruimteschip vliegen Je hebt nu een ruimteschip dat door de ruimte vliegt en naar links en rechts kan bewegen. De hoogste tijd om de meteorieten te laten verschijnen! Dit ga je doen door steeds een nieuwe kloon van de \u0026ldquo;echte\u0026rdquo; sprite te maken.\nMaak eerst een nieuwe sprite door een plaatje van een meteoriet in Scratch te laden, er zelf een te tekenen of een bestaande sprite te gebruiken (bijvoorbeeld een bal). Noem de sprite meteoriet.\nHet belangrijkste wat deze sprite doet is het elke paar seconden (of zo snel als je wilt) maken van een kloon van zichzelf.\nKlik om de code te bekijken  wanneer groene vlag wordt aangeklikt herhaal wacht (4) sec. maak een kloon van (mijzelf v) end    Als je de sprite zelf niet ziet, dan komt dat omdat deze achter de bewegende achtergrond zit. Dat geeft niets want alleen de klonen moeten zichtbaar zijn, maar het is wat onhandig als je wil zien wat je code doet. Je kunt hiervoor het blok ga naar laag voorgrond toevoegen.\nOok als je de sprite en klonen wel ziet, gebeurt er nog vrij weinig. Dat komt omdat ze allemaal bovenop elkaar verschijnen. De volgende stap is dan ook om de klonen op allerlei plaatsen te laten verschijnen.\nTip 1: er is een speciaal wanneer ik als kloon start blok waar je deze code onder kunt zetten.\nTip 2: laat de meteorieten ergens bovenin verschijnen (dus zet y bijvoorbeeld op 180).\nTip 3: gebruik voor de x het blok willekeurig getal tussen \u0026hellip;.\nDe code voor een kloon zou er ongeveer zo uit moeten zien  wanneer ik als kloon start ga naar laag [voorgrond v] ga naar x: (willekeurig getal tussen (-200) en (200)) y: (180) verschijn    Je bent er bijna! De een-na-laatste stap is om de klonen naar beneden te laten bewegen. Je kunt hiervoor weer een variabele voor de beweegsnelheid maken, een herhaal blok waarin je elke keer de plek van de sprite een beetje verandert werkt ook goed.\nEn waarom ben je nu nog niet helemaal klaar? Omdat het slim is je klonen ook weer te laten verdwijnen als ze onderaan het veld zijn aangekomen. Op deze manier blijft het spel soepel lopen.\nDe code voor een kloon ziet er dan zo uit  wanneer ik als kloon start ga naar laag [voorgrond v] ga naar x: (willekeurig getal tussen (-200) en (200)) y: (180) verschijn herhaal tot \u0026lt; (y-positie)   Schieten op de meteorieten Het is tijd om de meteorieten uit de weg te ruimen. Kies of maak een sprite die de kogel wordt, en noem deze ook kogel. Laat vervolgens een kogel \u0026ldquo;uit\u0026rdquo; het ruimteschip komen (bijvoorbeeld als je op de spatiebalk drukt) en naar het ruimteschip vliegen.\nTip 1: de code voor deze sprite lijkt wat op die voor de meteoriet; ook hier moet je klonen maken en die naar de meteorieten laten bewegen.\nTip 2: het blok ga naar is handig om de startplek van de kogel te bepalen.\nTip 3: als de kogel niets raakt is het wel slim de kloon te verwijderen als deze uit beeld verdwijnt.\nCode om kogels af te schieten  wanneer groene vlag wordt aangeklikt verdwijn herhaal als \u0026lt;toets [spatiebalk v] ingedrukt?\u0026gt; dan maak een kloon van (mijzelf v) end end wanneer ik als kloon start verschijn ga naar laag [voorgrond v] ga naar (ruimteschip v) herhaal tot \u0026lt;raak ik (rand v)?\u0026gt; verander y met (10) end verwijder deze kloon    Winnen en verliezen Natuurlijk wil je ook punten verdienen wanneer je een meteoriet raakt met je kogels, en bijvoorbeeld weer verliezen wanneer het ruimteschip door een meteoriet geraakt wordt. Maak voor de puntentelling een variabele score aan en zet die op 0 aan het begin van het spel (doe dit bij de code voor het ruimteschip).\nNu moeten we nog een paar stukken code toevoegen, namelijk:\n om op te merken wanneer een een meteoriet door een kogel geraakt wordt om hierna de meteoriet en de kogel te laten verdwijnen om op te merken wanneer een meteoriet het ruimteschip raakt  Tip: de meeste code hoort bij klonen van de meteoriet sprite.\nCode voor het raken van een meteoriet met een kogel  wanneer ik als kloon start herhaal als \u0026lt; raak ik (kogel v)?\u0026gt; dan verander [score v] met (1) verwijder deze kloon end    Code voor het laten verdwijnen van de kogel (deze hoort bij de kogel sprite!)  wanneer ik als kloon start wacht tot \u0026lt; raak ik (meteoriet v)?\u0026gt; wacht (0.1) sec. verwijder deze kloon    Code voor het raken van het ruimteschip met een meteoriet  wanneer ik als kloon start herhaal als \u0026lt; raak ik (ruimteschip v)?\u0026gt; dan maak [score v] (0) verwijder deze kloon end    Dit was het, veel speelplezier!\nUitbreidingen Je kunt het spel natuurlijk nog veel mooier, spannender en moeilijker maken. Hier heb je alvast een lijstje met ideeën als je nog verder wil programmeren:\n zorg dat je minder vaak kogels kunt afschieten laat de meteorieten niet alleen naar beneden komen maar ook echt op je ruimteschip af laat de meteorieten sneller bewegen als je meer punten hebt gehaald voeg geluiden en andere effecten toe  Licentie Deze instructies worden, net als alle andere instructies van CoderDojo Nijmegen, aangeboden onder een Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Licentie.  ","date":"October 6, 2020","permalink":"/instructies/scratch-space-shooter/","title":"Scratch - Space shooter"},{"categories":null,"contents":"Wat gaan we doen? Na twee maanden \u0026ldquo;live\u0026rdquo; deze maand weer een online dojo, dit keer met de ruimte als thema! Je kunt deze dojo aan de slag met opdrachten in Scratch, Python of MakeCode Arcade:\n als je nog geen of weinig programmeerervaring hebt is Scratch de beste keuze als je klaar bent om \u0026ldquo;echte\u0026rdquo; code te schrijven kun je gaan programmeren in Python - doe dan bijvoorbeeld mee aan de Astro Pi challenge en laat jouw eigen geschreven computercode uitvoeren op het ruimtestation ISS! Met MakeCode Arcade kun je \u0026ldquo;retro\u0026rdquo; spelletjes programmeren (vraag maar aan je ouders) op zowel een Scratch-achtige manier als met Python.  Voorbereiding Heb je je aangemeld voor Scratch en/of MakeCode Arcade, dan kun je uit deze opdrachten kiezen:\n  Scratch:\n Verdwaald in de ruimte Space-shooter    MakeCode Arcade (in het Engels!)\n ga naar Tutorials -\u0026gt; Galga (dit spel is zowel met blokken als met Python te programmeren) ga naar Blocks Games -\u0026gt; Space Destroyer ga naar Game Concepts -\u0026gt; Star Field    Heb je je aangemeld voor Python, dan zijn dit de opdrachten voor deze keer:\n Astro-Pi Waar is het ruimtestation?  Jitsi We gebruiken voor de dojo het online chatprogramma Jitsi, waardoor de mentoren je gewoon kunnen helpen als je vast komt te zitten bij een opdracht - eigenlijk net als anders dus! Jitsi werkt het best met de webbrowser Google Chrome. Voorafgaand aan de dojo sturen we je meer details.\nSpelregels voor de online dojo Graag willen we vooraf een aantal afspraken met elkaar maken over hoe we online samenwerken.\n De webcam van de deelnemers blijft uit. De kinderen kunnen de mentoren wel zien. Zet je microfoon is uit als je niet aan het woord bent Deel geen persoonlijke informatie Als je een vraag hebt, stel die dan eerst in de chat. Als je hulp nodig hebt met je code, dan vragen we je je scherm te delen en helpen we je verder.  Algemene info Kinderen vanaf 7 jaar kunnen gratis meedoen aan CoderDojo. Het enige wat je nodig hebt om mee te kunnen doen is een laptop met werkende wifi waarop je software mag installeren. Ben je 12 jaar of jonger? Dan vragen we je om één van je ouders mee te nemen om je te begeleiden tijdens de dojo. Verder kan het verstandig zijn om wat te eten mee te nemen, van programmeren krijg je namelijk hongerrrr!\nOm zeker te weten dat we over voldoende spullen beschikken, moet je van tevoren ook even reserveren. Je hebt slechts één ticket per kind nodig. Ouders hoeven geen ticket te reserveren. Denk er wel even aan om je ticket mee te nemen naar CoderDojo (mag digitaal).\nNo show? Ben je de dag zelf verhinderd, laat het dan op tijd weten! Zo kunnen we mensen op de wachtlijst uitnodigen of besluiten één van de mentoren een vrije zaterdag te gunnen. Bij herhaaldelijk niet opdagen zonder afmelding halen we je van de mailinglijst.\n","date":"October 2, 2020","permalink":"/dojos/69-online/","title":"#69 Online: Python, Scratch \u0026 MakeCode"},{"categories":null,"contents":"Introductie Sluit de Arduino pas aan op de computer met de USB kabel nadat je een circuit hebt gebouwd. Haal de kabel er weer uit voor je iets verandert aan het circuit.\nDe onderdelen De Arduino Uno heeft een aantal verschillende aansluitingen: de voeding (plus en aarde), digitale in- en uitgangen, en analoge in-en uitgangen.  Met de voeding kun je het circuit dat je hebt gebouwd van stroom voorzien. Met de digitale in- en uitgangen kun je aan en uit opdrachten geven, bijvoorbeeld of een LED aan of uit moet staan. Dit zijn aansluitingen 2 t/m 13 Met de analoge ingangen kun je de waarden van bijvoorbeeld licht- of temperatuursensoren meten (die zijn niet beperkt tot 0 (uit) of 1 (aan). Dit zijn aansluitingen A0 t/m A5. Met de analoge uitgangen (dit zijn de digitale aansluitingen die gemerkt zijn met een ~) kun je bijvoorbeeld een LED harder of zachter laten branden.  Je kunt een circuit bouwen op een zogenaamd breadboard. Deze zijn er in allerlei soorten en maten. Op dit schema kun je zien welke gaatjes (elektrisch) met elkaar verbonden zijn. Opdrachten Code uploaden naar de Arduino Als je een stuk code hebt gemaakt in mBlock, klik je met de rechtermuisknop op het Arduino programma. De code die naar de Arduino geupload moet worden komt tevoorschijn. Klik nu op Upload naar Arduino. Voorbeeldopdracht 1: knipperende LED  Maak het volgende circuit (met behulp van een breadboard).  Schakel nu de LED in door de juiste output op HOOG te zetten. mBlock code     Nu wil je dat de LED daarna ook weer uit gaat. mBlock code     Er zit geen tijd tussen het aan- en uitgaan! mBlock code     Nu wil je dit blijven herhalen. mBlock code      Voorbeeldopdracht 2: metronoom (Grove kit)  Sluit het LCD scherm, de variabele weerstand en de buzzer aan op de juiste poorten. Laat de buzzer elke seconde (of zoiets) een geluidje maken. mBlock code     Lees de waarde van de variabele weerstand af om deze vervolgens te kunnen vertalen naar een snelheid voor de metronoom. mBlock code     Combineer nu de buzzer en variabele weerstand! mBlock code      Uitdagingen  Stoplicht met schakelaar Lichtkrant (Grove, met LCD schermpje) Licht- of donkerwijzer (met servo motor) Thermometer (met temperatuursensor)  Bronnen  https://www.arduino.cc/en/Tutorial/BlinkWithoutDelay Project: http://www.makeuseof.com/tag/arduino-traffic-light-controller/ Schakelaar: http://oscarromero-arduino.weebly.com/pull-down-weerstand.html https://github.com/josejuansanchez/37-in-1-arduino-sensor-kit/tree/master/001 https://github.com/Seeed-Studio/Sketchbook_Starter_Kit_for_Arduino http://wiki.seeed.cc/Grove_Starter_kit_for_Arduino_101/ Breadboard Elementen  Licentie Deze instructies worden, net als alle andere instructies van CoderDojo Nijmegen, aangeboden onder een Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Licentie.   ","date":"August 29, 2020","permalink":"/instructies/mblock/arduino/","title":"mBlock - Arduino"},{"categories":null,"contents":"Introductie Voor je de mBot aanzet: de mBot eerst op de grond zetten of op de kop leggen!\nHou rekening met de beperkte ruimte: laat het vermogen van de wielen eerst gewoon op 50% staan.\nOok handig om te weten:\n Je kunt de taal instellen via de wereldbol. De volgende instructies gaan uit van Nederlandse blokken. Je vindt de mBot bij Apparaten; bij Sprites staan de afbeeldingen die je op het scherm ziet (in het voorbeeld dus de panda). Net als bij Scratch staan de blokken per soort bij elkaar. Neem even de tijd om te kijken wat voor blokken er in de verschillende menu\u0026rsquo;s staan. Waar vind je bijvoorbeeld de als\u0026hellip; dan\u0026hellip; blokken? Je kunt de mBot live programmeren terwijl deze met de computer verbonden is, of programma\u0026rsquo;s uploaden\u0026gt; naar het geheugen van de mBot. De live manier is makkelijk als je aan het uitproberen bent hoe dingen werken, na uploaden kun je de mBot loskoppelen van de computer.  De mBot met de computer verbinden  Start mBlock. Sluit de mBot aan met de USB-kabel en zet de robot aan. Verwijder bij het tabblad Apparaten eventuele andere robots, klik op toevoegen en kies dan de mBot. Klik nu op verbinden, begin met de Live stand. Test of de verbinding gelukt is, bijvoorbeeld door op dit element te (dubbel)klikken:  Je bent nu klaar om een programma te gaan schrijven!  De input en output van de mBot Voelen (met de sensoren) De mBot heeft een aantal sensoren om z\u0026rsquo;n omgeving te voelen.\n Ultrasoon: dit zijn de twee \u0026lsquo;ogen\u0026rsquo; voorop de mBot. De mBot gebruikt net als een vleermuis echo\u0026rsquo;s om voorwerpen te \u0026lsquo;zien\u0026rsquo;. Het ene oog stuurt een geluidje en het andere oog vangt de echo op. Lijnvolg: voor het voorwiel zitten twee sensoren die het verschil tussen licht en donker kunnen meten. Als de mBot over een lijn rijdt kan hij op deze manier zien of er een bocht aankomt. Lichtsterkte: bovenop (onder het plastic kapje) zit een sensor die meet hoe licht het in de ruimte is.  Doen (met de actuatoren)  Motoren: ieder wiel wordt met een aparte motor bestuurd. LEDs: bovenop (onder het plastic kapje) zitten twee LEDs die je elke kleur kunt maken die je wilt. Buzzer: ook onder het kapje zit een buzzer waarmee je de mBot verschillende hoogte tonen kunt laten maken.  Opdrachten Voorbeeldopdracht 1: een vierkant rijden Aangezien de mBot bij dit programma moet rijden is het verstandig je programma naar de mBot te uploaden en het programma te starten als deze op de grond staat. Je kunt het programma laten starten bij het aanzetten van de mBot; in dit voorbeeld start het programma als de knop bovenop wordt ingedrukt.\n De eerste stap is om de mBot een stuk vooruit te laten rijden. 50% van het vermogen is prima om mee te beginnen. Start het programma door op het zwarte knopje bovenop de mBot te drukken. mBlock code     Nu rijdt de mBot eindeloos door! Zorg dus dat deze na een paar seconden weer stopt met rijden. mBlock code     Laat nu de mBot een bocht maken. Probeer de tijd zo in te stellen dat ie rechtsaf (of linksaf) slaat. mBlock code     Dit stuk code wil je nu een aantal keer herhalen. mBlock code      Voorbeeldopdracht 2: sensorwaarden laten zien Om opdrachten te kunnen programmeren is het vaak handig om te weten wat de sensoren van de mBot meten. Om dit te kunnen zien moet je de gemeten waarde bewaren in een variabele. Kijk bijvoorbeeld wat de lichtsensor meet als je je hand bovenop de mBot houdt, of de ultrasoonsensor als je je hand heen en weer beweegt voor de mBot.\n Maak eerst een variabele aan voor lichtsterkte en/of afstand. Je kunt zelf kiezen of andere sprites deze variabele ook mogen zien en gebruiken. mBlock code     Wijs nu de waarde gemeten door de sensor toe aan deze variabele. Als je nu het programma uitvoert zie je dat linksboven in het scherm de gemeten waarde(n) getoond worden. \u0026ldquo;mBot:\u0026rdquo; voor lichtsterkte geeft aan dat deze variabele alleen voor de mBot beschikbaar is. mBlock code     De LEDs op de mBot kunnen beïnvloeden wat de lichtsensors meten, zet daarom eerst de LEDs uit. mBlock code     Waarschijnlijk wil je de waarde(n) van de sensor(s) meer dan één keer bepalen. Herhaal daarom deze stap. Vaak is het ook verstandig een kleine pauze na iedere herhaling in te bouwen. mBlock code      Voorbeeldopdracht 3: help, een muur! In deze opdracht is het de bedoeling om te voorkomen dat de mBot tegen de muur botst (nadat je \u0026rsquo;m er wel naar toe laat rijden natuurlijk).\n Begin weer met de mBot te laten rijden na het indrukken van de knop. mBlock code     Maak nu een voorwaarde waarbij de mBot bij een afstand van minder dan 20 centimeter stopt met rijden. mBlock code     Gebeurt er nu wat je wil? Zo niet, denk dan eens na waarom niet? Heb je een stukje code vergeten? mBlock code     Sla maar eens flink alarm met licht en geluid om duidelijk te maken dat de mBot bijna gebotst was! Natuurlijk kan dit op veel manieren, de voorbeeldcode is er daar één van. mBlock code      Uitdagingen Hier nog een paar uitdagingen waar je aan kunt werken. Ze beginnen makkelijk en worden steeds moeilijker.\nGa zelf aan de gang! Natuurlijk kun je zelf iets verzinnen voor de mBot, hier zijn wat ideeën voor als je inspiratie nodig hebt:\n Rijd een achtje (of extra moeilijk: een spiraal) Lichten aan in de tunnel Aan de slag als politieauto of ambulance Volg de lijn Ontwijk de voorwerpen Volg een voorwerp  Licentie Deze instructies worden, net als alle andere instructies van CoderDojo Nijmegen, aangeboden onder een Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Licentie.   ","date":"August 29, 2020","permalink":"/instructies/mblock/mbot/","title":"mBlock - mBot"},{"categories":null,"contents":"In deze opdracht ga je een figuur uit Scratch laten bewegen met de micro:bit.\nLet op: dit kan op dit moment alleen als je een computer hebt met Windows 10 of Mac OS 10+ en met Bluetooth 4.0.\nVoorbereiding Wat heb je nodig:   een micro:bit\n  een USB kabel om de micro:bit aan te sluiten aan de computer\n  een batterij om de micro:bit los van de computer te kunnen gebruiken\n  Scratch 3 en de micro:bit met elkaar verbinden Om de micro:bit met Scratch te verbinden moet je twee dingen doen: een programmaatje installeren op je computer en een bestandje naar de micro:bit kopiëren. Volg de aanwijzingen op de Scratch Link pagina. Misschien handig: helemaal onderaan de pagina kun je de taal op Nederlands zetten.\nHet programma Stap 1: Scratch 3 Beta Ga naar de Scratch 3 Beta pagina, klik linksonder op het Scratch Extensions icoon en kies hier de micro:bit extensie. De micro:bit blokken worden nu onderaan toegevoegd en er wordt verbinding gezocht met de micro:bit, dit ziet er zo uit:\nStap 2: De Scratch kat besturen met de micro:bit Je bent nu klaar om een spelletje te maken met de micro:bit als controller. Je kunt bijvoorbeeld de Scratch kat (of een ander figuur natuurlijk) laten reageren wanneer je op een knopje drukt, of bijvoorbeeld de micro:bit naar een kant kantelt. Probeer deze blokken maar eens en kijk wat er gebeurt:\nDit is natuurlijk nog niet heel spannend, maar je ziet dat er eigenlijk niet echt verschil is of je nou toetsen op je toetsenbord of de micro:bit gebruikt.\nStap 3: De besturing wat \u0026ldquo;slimmer\u0026rdquo; maken Bij de blokken in de vorige stap zag je dat de Scratch kat nadat je de \u0026ldquo;A\u0026rdquo; knop had ingedrukt de hele tijd \u0026ldquo;Hallo!\u0026rdquo; bleef zeggen, en dat je de micro:bit steeds opnieuw naar links moest kantelen om de kat een stukje te laten bewegen. Dat kan handiger, en werkt op dezelfde manier als wanneer je gewoon de knoppen van je toetsenbord gebruikt. Door een herhaal te gebruiken samen met een als \u0026hellip; dan \u0026hellip; blok te gebruiken kun je steeds controleren of een knop is ingedrukt, de micro:bit wordt gekanteld, enzovoorts. Dan ziet je programma er bijvoorbeeld zo uit:\nJe kunt de verschillende als \u0026hellip; dan \u0026hellip; blokken natuurlijk ook in hetzelfde herhaal blok zetten.\nAls je de beweging van je figuur vloeiender wilt maken kun je bijvoorbeeld kijken naar deze instructies, waarbij je dan de toetsenbordknoppen moet vervangen door knoppen en bewegingen van de micro:bit. Je kunt ook spelen met kantelen naar voren en achteren, of schudden met de micro:bit.\nStap 4: Een spelletje bouwen Nu je de Scratch kat kunt laten bewegen met de micro:bit kun je hier een spelletje omheen bedenken. Heb je zelf geen ideeën? Vraag de mentoren of kijk eens hier:\n Onze andere Micro:Bit opdrachten Scratch projecten en zoek bijvoorbeeld op \u0026lsquo;platform\u0026rsquo; of \u0026lsquo;vliegen\u0026rsquo; (waarschijnlijk werkt dit alleen in Google Chrome) Google Drive van CoderDojo Zoetermeer met opdrachten op verschillende niveau\u0026rsquo;s.  Let op: deze opdrachten zijn wel voor Scratch 2 geschreven, als je daardoor dingen niet kunt vinden of niet snapt in Scratch 3 laat het de mentoren weten!\nLicentie Deze instructies worden, net als alle andere instructies van CoderDojo Nijmegen, aangeboden onder een Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Licentie.  ","date":"August 27, 2020","permalink":"/instructies/microbit/microbit-controller/","title":"Micro:Bit - Als controller in Scratch"},{"categories":null,"contents":"We gaan de Maqueen laten voelen en laten doen.\nIntroductie Voor je de Maqueen aanzet: de Maqueen eerst op de grond zetten! Hou rekening met de beperkte ruimte: laat het vermogen van de wielen eerst gewoon op 50% staan.\nOok handig om te weten (zie de cijfers in de afbeelding hierboven):\n Bij de instellingen kun je de taal aanpassen. Deze instructies gaan uit van Nederlandse blokken. Net als bij Scratch staan de blokken per soort bij elkaar. Neem even de tijd om te kijken wat voor blokken er in de verschillende menu\u0026rsquo;s staan. Waar vind je bijvoorbeeld de als\u0026hellip; dan\u0026hellip; blokken? Met de knop Downloaden zet je je programma op de micro:bit. Als je een fout hebt gemaakt en die wil herstellen dan klik je op het pijltje terug  De Maqueen met de computer verbinden  Start MakeCode. Voeg de Maqueen functies toe aan MakeCode door helemaal onderaan het menu met de blokken op Uitbreidingen te klikken. Plak deze url in de zoekbalk boven in het scherm dat nu verschijnt: https://github.com/MKleinSB/maqueen en klik op het plaatje dat verschijnt. Steek de micro:bit in de Maqueen. De knoppen en LEDjes moeten aan de voorkant zitten. Sluit de micro:bit met de USB-kabel op de computer aan. Je hoeft de Maqueen zelf nog niet aan te zetten. Klik nu op verbinden, begin met de Live stand. Test of de verbinding gelukt is door dit programma te maken en het naar de micro:bit te downloaden: De LED linksvoor zou nu moeten gaan branden. Je bent nu klaar om een eigen programma te gaan schrijven!  De input en output van de Maqueen Voelen (met de sensoren) De Maqueen heeft een aantal sensoren om z\u0026rsquo;n omgeving te voelen.\n Ultrasoon: dit zijn de twee \u0026lsquo;ogen\u0026rsquo; voorop de Maqueen. De Maqueen gebruikt net als een vleermuis echo\u0026rsquo;s om voorwerpen te \u0026lsquo;zien\u0026rsquo;. Het ene oog stuurt een geluidje en het andere oog vangt de echo op. De afstand die de sensor meet heet in MakeBlock Sensor eenheid. Lijnvolg: onderop, achter het voorwiel, zitten twee sensoren die het verschil tussen licht en donker kunnen meten. Als de Maqueen over een lijn rijdt kan hij op deze manier zien of er een bocht aankomt. Wat deze sensoren meten heet in MakeBlock Lees route geleiding. Infrarood: voorop, als een soort neusje, zit een infrarood sensor waarmee je de Maqueen bijvoorbeeld met een afstandsbediening kunt besturen.  Doen (met de actuatoren)  Motoren: ieder wiel wordt met een aparte motor bestuurd. LEDs: voorop zitten twee rode LEDs, onderop zitten 4 LEDs (NeoPixels) die je iedere kleur kunt maken die je wilt. Buzzer: net achter de micro:bit zit een buzzer waarmee je de Maqueen allerlei tonen kunt laten maken, en zelfs een beetje laten praten. Meer over de Maqueen kun je hier lezen (in het Engels).  MakeCode opdrachten Voorbeeldopdracht 1: een vierkant rijden  De eerste stap is om de Maqueen een stuk vooruit te laten rijden. 100 is een mooie snelheid om mee te beginnen. Laat de Maqueen gaan rijden als je op de linkerknop van de micro:bit drukt. Zet \u0026rsquo;m eerst op de grond! MakeCode code     Nu rijdt de Maqueen eindeloos door! Zorg dus dat deze na een paar seconden weer stopt met rijden. MakeCode code     Laat nu de Maqueen een bocht maken. Probeer de tijd zo in te stellen dat ie rechtsaf (of linksaf) slaat. MakeCode code     Nu wil je meer bochten maken. Probeer daar eens een herhaal-blok voor te gebruiken! MakeCode code      Voorbeeldopdracht 2: help, een muur! In deze opdracht is het de bedoeling om te voorkomen dat de Maqueen tegen de muur botst (nadat je \u0026rsquo;m er wel naar toe laat rijden natuurlijk).\n Begin weer met de Maqueen te laten rijden na het indrukken van de knop. MakeCode code     Maak nu een voorwaarde waarbij de Maqueen bij een afstand van minder dan 20 centimeter stopt met rijden. MakeCode code     Gebeurt er nu wat je wil? Zo niet, denk dan eens na waarom niet? Heb je een stukje code vergeten? MakeCode code oplossing 1    MakeCode code oplossing 2     Sla maar eens flink alarm met licht en geluid om duidelijk te maken dat de Maqueen bijna gebotst was! Natuurlijk kan dit op veel manieren, de voorbeeldcode is er daar één van. MakeCode code      Voorbeeldopdracht 3: knipperen op de zebra. In deze opdracht is het de bedoeling dat je de LEDs van de Maqueen aan laat gaan op het moment dat je over zwarte strepen rijdt. Je kunt hiervoor het best zwart tape gebruiken, stiften werken niet zo goed.\n Begin weer met de Maqueen te laten rijden na het indrukken van de knop. MakeCode code     Welke sensor kun je gebruiken om de zwarte strepen te herkennen? En welke waarde heeft de sensor als deze zwart ziet? Hint: je kunt de display van de micro:bit (de 25 LEDs) gebruiken om deze waarde te laten zien. MakeCode code     Gebruik deze waarde nu in een voorwaarde om de LED aan en uit te laten gaan terwijl je over de strepen rijdt. MakeCode code      Uitdagingen Hier nog een paar uitdagingen waar je aan kunt werken. Ze beginnen makkelijk en worden steeds moeilijker.\nGa zelf aan de gang! Natuurlijk kun je zelf iets verzinnen voor de Maqueen, hier zijn wat ideeën voor als je inspiratie nodig hebt:\n Rijd een achtje (of extra moeilijk: een spiraal) Lichten aan in de tunnel Aan de slag als politieauto of ambulance Volg de lijn Ontwijk de voorwerpen Volg een voorwerp  Licentie Deze instructies worden, net als alle andere instructies van CoderDojo Nijmegen, aangeboden onder een Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Licentie.  ","date":"August 27, 2020","permalink":"/instructies/microbit/maqueen/","title":"Micro:Bit - Maqueen"},{"categories":null,"contents":"In deze opdracht ga je het spelletje steen-papier-schaar programmeren op de micro:bit, en dit spelen tegen iemand anders.\nVoorbereiding Wat heb je nodig:  een micro:bit (of twee) een USB kabel om de micro:bit aan te sluiten aan de computer een batterij om de micro:bit los van de computer te kunnen gebruiken  Het programma Stap 1: steen, papier en schaar tekenen Bij dit programma maken we gebruik van de LEDjes op de micro:bit. Hier kun je allerlei figuren op maken, teken nu eerst een steen, vel papier en een schaar.\nStap 2: een keuze maken De micro:bit gaat een van de drie kiezen. Hiervoor moet je een paar dingen programmeren.\n  Eerst heb je het blok pick random 0 to 10 voor nodig, dit vind je in het menu Wiskunde. Stel het blok zo in dat het drie getallen kan kiezen, namelijk 1, 2 of 3:   Maak nu een variabele aan om het gekozen getal een naam te geven en later weer te kunnen gebruiken. Noem het bijvoorbeeld \u0026ldquo;keuze\u0026rdquo;:   Geef nu deze variabele de waarde van het gekozen getal, en laat de micro:bit deze opdracht uitvoeren als je op de A knop van de micro:bit drukt:   Stap 3: het gekozen plaatje laten zien Je hebt nu een variabele keuze die het cijfer 1, 2 of 3 kan zijn, en drie plaatjes. Nu moet elk van de keuzes een ander plaatje laten zien: 1 = steen, 2 = papier en 3 = schaar.\nGebruik hiervoor het blok als \u0026hellip; dan \u0026hellip; blok en het \u0026hellip; = \u0026hellip; blok uit het menu Logisch:\nAls je het programma hierboven uitvoert laat de micro:bit alleen een plaatje zien als keuze 1 is, voeg daarom nu ook de andere twee plaatjes toe.\nAls iemand anders nu ook het steen-papier-schaar programma op een micro:bit zet dan kun je het tegen elkaar spelen!\nStap 4: een bericht sturen en ontvangen Als je nog tijd over hebt en het programma nog verder wilt uitbreiden dan kun je proberen de micro:bits met elkaar te laten praten. Als de micro:bits hun keuze naar elkaar sturen kunnen ze de keuzes vergelijken en zelf ook zien wie er gewonnen heeft.\nMicro:bits praten met elkaar via de radio. Ze kunnen bijvoorbeeld woorden of getallen naar elkaar sturen, en je kunt de micro:bit programmeren om een opdracht uit te voeren bij het ontvangen van een bericht.\nBij steen-papier-schaar sturen de micro:bits de waarde van keuze naar elkaar toe (pijl 1). Wacht voor je je keuze naar de andere micro:bit stuur eerst even (pijl 2), anders verdwijnt je plaatje meteen weer:\nOm een bericht te kunnen ontvangen moeten micro:bits op hetzelfde kanaal sturen en ontvangen (net als bijvoorbeeld bij een walkie-talkie):\nStap 5: de winnaar bekend maken De micro:bit kan nu de keuze van de ander ontvangen, maar doet er nog niks mee. Om de eigen keuze met die van de andere te vergelijken om te kijken wie er gewonnen heeft gebruik je weer een als \u0026hellip; dan \u0026hellip; blok uit het menu Logisch, waarbij er natuurlijk een boel verschillende combinaties zijn!\n Speler 1 heeft steen en speler 2 ook: gelijkspel! Speler 1 heeft steen en speler 2 heeft schaar: speler 1 wint! Speler 1 heeft steen en speler 2 heeft papier: speler 2 wint! Enzovoorts  In het voorbeeld hieronder zie je dat je moet kijken naar het receivedNumber, het ontvangen nummer dus de keuze van de andere micro:bit.\nEr zijn alvast twee gevallen geprogrammeerd:\n dat waarbij de micro:bits allebei dezelfde keus maakten: dan is \u0026ldquo;keuze\u0026rdquo; gelijk aan receivedNumber dat waarbij de eigen keuze steen was (getal 1) en dat van de ander papier (getal 2). Deze micro:bit heeft dan dus verloren.  Programmeer nu zelf de rest van de mogelijkheden.\nStap 6: tot drie tellen voor je het plaatje laat zien Om het nog even spannend te houden kun je de micro:bit eerst nog tot drie laten tellen voor je de keuze laat zien. Hier heb je een x keer herhalen blok voor nodig uit het menu Lussen en het toon nummer blok uit het menu Basis:\nLicentie Deze instructies worden, net als alle andere instructies van CoderDojo Nijmegen, aangeboden onder een Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Licentie.  ","date":"August 27, 2020","permalink":"/instructies/microbit/steen-papier-schaar/","title":"Micro:Bit - Steen-papier-schaar"},{"categories":null,"contents":"In deze opdracht ga je een stoplicht maken.\nHet stoplicht heeft twee kleuren: groen en rood. Normaal staat het stoplicht op rood. Als je op een knopje drukt springt het op groen, en na een tijdje weer op rood. Als dit gelukt is kun je het programma zo aanpassen dat het stoplicht op groen springt als er een auto over de micro:bit heen \u0026ldquo;rijdt\u0026rdquo;, bijvoorbeeld door je hand erboven te houden.\nVoorbereiding Wat heb je nodig:  een micro:bit een USB kabel om de micro:bit aan te sluiten aan de computer een rode en een groene LED vier \u0026ldquo;krokodillenbekken\u0026rdquo;  Alles aansluiten Net als batterijen hebben LED lampjes een plus en een min. Als je goed kijkt zijn de pootjes van de LED\u0026rsquo;s niet even lang: het net iets langere pootje is de plus, de kortere de min. Gebruik de krokodillenbekken om de plussen van de rode en groene LED vast te maken op aansluitingen Pin 0 en Pin 1 van de micro:bit, en de minnen aan de GND (je kunt de eerste krokodillenbek aan GND vastmaken en de tweede aan de eerste). Het zou er dan ongeveer zo uit moeten zien:\nHet programma Stap 1: Een LED aanzetten Om een LED aan te zetten moet je stroom laten lopen van de plus-aansluiting door de LED naar de min. Dit doe je met het blok schrijf digitaal pin \u0026lt;P0\u0026gt; naar 0. Dit vind je door op Geavanceerd (zie pijl 1) te klikken en daarna op Pinnen (pijl 2), zie het plaatje hieronder. Laat de LED aan gaan wanneer je op knop A drukt.\nStap 2: De LED weer uit laten gaan Je hebt er weinig aan als de LED de hele tijd aan blijft. Deze moet dus na een tijdje weer uit. Wacht na het aanzetten bijvoorbeeld een seconde (1000 ms) en zet de LED dan weer uit door Pin 0 weer op 0 te zetten:\nStap 3: Het stoplicht staat op rood, tot je op de knop drukt Nu is het tijd om allebei de LEDs te gebruiken: de rode moet eigenlijk altijd aan zijn, behalve wanneer op knop A wordt gedrukt. Dit doe je door bij het opstarten de rode LED al aan te zetten, en deze uit te zetten op het moment dat de groene LED aan gaat:\nStap 4: de knop vervangen door een “auto” Als extra uitdaging kun je nu het indrukken van knop A vervangen door wat er gebeurt als de micro:bit in het donker terecht komt doordat er een auto overheen rijdt. Hiervoor heb je het blok lichtniveau uit het menu Invoer nodig, en moet je kijken hoeveel licht (een getal tussen 0=helemaal donker en 255=heel licht) de micro:bit ziet als je er bijvoorbeeld je hand boven houdt. Deze waarde kun je dan gebruiken als voorwaarde om het stoplicht op groen te laten springen. Om een programma met deze voorwaarde te maken heb je ook blokken uit het menu Logisch nodig: het als waar dan \u0026hellip; blok en het \u0026hellip; \u0026lt; \u0026hellip; blok. En je moet ervoor zorgen dat je programma de hele tijd kijkt of de voorwaarde waar is of niet. Uiteindelijk moet het er dan ongeveer zo uitzien:\nLicentie Deze instructies worden, net als alle andere instructies van CoderDojo Nijmegen, aangeboden onder een Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Licentie.  ","date":"August 27, 2020","permalink":"/instructies/microbit/stoplicht/","title":"Micro:Bit - Stoplicht"},{"categories":null,"contents":"We gaan de slag met Scratch en videosensing.\nInleiding Deze Dojo gaat over Scratch 3, en als je een webcam hebt (ingebouwd of los) kun je in Scratch 3 aan de slag met video sensing.\nScratch 3 is de nieuwste versie van Scratch en komt in januari 2019 officieel uit. Op dit moment is er een beta versie beschikbaar, dit betekent dat nog niet alles af is en er nog dingen kunnen veranderen in de definitieve versie.\nBelangrijk: het is nog niet mogelijk om online een programma op te slaan, dit moet je op je eigen computer doen. Het is aan te raden dit regelmatig te doen om te zorgen dat je geen werk verliest. Je kunt opgeslagen programma\u0026rsquo;s ook weer uploaden.\nScratch is er in een heleboel talen. De plaatjes hieronder zijn in het Nederlands dus is het handig om dat ook als taal te kiezen.\nVideo sensing Je kunt in Scratch programma\u0026rsquo;s schrijven die reageren wat er gebeurt op wat de webcam \u0026ldquo;ziet\u0026rdquo;, en dan ook de kleur van wat ie ziet. Hier zijn allerlei spelletjes mee te verzinnen. Hieronder staan wat bouwblokken en ideeën die je kunt gebruiken voor je eigen spel. Sommige zijn meer geschikt voor een ingebouwde webcam en sommige meer voor een losse.\nBegin met het aanzetten van de webcam. De blokken die je hiervoor nodig hebt moet je eerst toevoegen door linksonder te klikken op de knop \u0026ldquo;Voeg een uitbreiding toe\u0026rdquo; en daarna \u0026ldquo;Video\u0026rdquo; te kiezen. Scratch zal je nu waarschijnlijk vragen om toestemming om de webcam te gebruiken. Door nu op het blok \u0026ldquo;zet video aan\u0026rdquo; te klikken zal je op de achtergrond van Scratch zien wat de webcam ziet. Het is nog een beetje onduidelijk, als je het blok \u0026ldquo;zet video transparantie\u0026rdquo; instelt op 0 en er op klikt zie je het beter.\nKleur instellen Om ervoor te zorgen dat Scratch reageert op de kleur die de webcam ziet moet je deze eerst instellen. Zet eerst de webcam aan in Scratch Dit doe je door op de kleur van het blok \u0026ldquo;raak ik kleur\u0026rdquo; te klikken en daarna op het icoon in de rode cirkel. Je kunt nu een kleur in het beeld van de webcam aanklikken.\nBouwblokken Sprite beweegt tegen een kleur aan\nDit bouwblok is het makkelijkst te gebruiken als je een losse webcam hebt die je op tafel kunt richten. In dit geval liggen de gekleurde voorwerpen (papiertjes, legoblokjes, M\u0026amp;M\u0026rsquo;s, noem maar op) en beweegt een sprite tegen de voorwerpen aan. Je kunt dan programmeren wat er moet gebeuren als de sprite een kleur raakt: hij verandert van uiterlijk, er klinkt een geluid, je poppetje is \u0026ldquo;af\u0026rdquo;, enzovoorts.\nKleur beweegt tegen een sprite aan\nIn dit geval gaat het er om dat een kleur op een bepaalde plek op het scherm verschijnt en Scratch daarop reageert. Om dat voor elkaar te krijgen doe je eigenlijk hetzelfde als in het vorige voorbeeld - bijvoorbeeld \u0026ldquo;als deze sprite kleur rood raakt\u0026rdquo;, maar zit de sprite vast op één plek, bijvoorbeeld het linker- of rechterdeel van het scherm. Het kan voor je spelletje handig zijn om deze sprites te verbergen. Dit kun je doen door eerst op een sprite te klikken en daarna op het blok \u0026ldquo;verberg\u0026rdquo;.\nMogelijke spelletjes Speed color: wie houdt het snelst de goede kleur in beeld\n In dit spelletje speel je met twee spelers, en heeft elke speler één helft van het scherm (links en rechts). Tel af en laat dan een kleur zien, de spelers moeten nu de goede kleur papier omhoog houden. Tip: gebruik hiervoor de functie \u0026ldquo;willekeurig getal tussen 1 en \u0026hellip;\u0026rdquo; Extra moeilijk: laat de kleur die spelers omhoog moeten houden zien als woord met de letters in een andere kleur, bijvoorbeeld \u0026ldquo;blauw\u0026rdquo; maar dan met rode letters.  Kleurenmuziek\n Dit is een spelletje om muziek te maken met kleuren die je in beeld laat zien. Dit kan met een ingebouwde en losse webcam. Als je gekleurde voorwerpen op tafel legt kun je bijvoorbeeld een bewegende \u0026ldquo;streep\u0026rdquo; maken die steeds over het beeld schuift.  Gekleurde platformen\n In dit spel maak je een platform van gekleurde voorwerpen en moet een sprite daar overheen lopen/rennen. Begin met programmeren van de beweging van de sprite met een platform dat je in Sprite hebt getekend. Bepaal dan wat de kleuren moeten doen als je ze raakt (bijvoorbeeld opnieuw beginnen). Vervang dan het getekende platform door voorwerpen die de webcam ziet. Bonus: hieronder vind je een aantal tips om de beweging van de sprite minder schokkerig te maken.  Platform spel Het maken van een vloeiende beweging\nIn Scratch kun je bewegen van links naar rechts, en van boven naar onder. De plek van links naar rechts wordt bepaald door de waarde van x, en die van boven naar onder door y. Deze waarden noem je de coördinaten.\nDe makkelijkste manier om dit te doen is door een knop aan een verandering in de waarde van x en y te verbinden: Dit kun je ook voor beweging de andere kant op, naar boven en beneden doen. Deze beweging is nogal schokkerig. Je kunt deze beweging op meerdere manieren vloeiender maken. Een manier is de volgende. Als eerste moet je hiervoor de waarde van x niet meteen als getal intypen, maar dit doen via een variabele die de snelheid van de sprite bepaalt (zie het menu \u0026lsquo;variabelen\u0026rsquo;):\nDe volgende stap is om deze stap in een herhaal lus te zetten, daardoor blijft de snelheid veranderen zo lang je de knop ingedrukt houdt:\nWat er nu gebeurt is dat de sprite na het loslaten van de knop net zo snel blijft gaan. Je moet dus instellen dat de snelheid omlaag gaat als je de knop niet indrukt:\nJe zult nu zien dat de snelheid na een tijdje onder de 0 gaat en de sprite dus de andere kant op zal gaan bewegen. O dit te voorkomen moet een je een voorwaarde toevoegen dat de snelheid niet onder de 0 mag komen.\nBeweging naar links kun je op dezelfde manier programmeren, uiteindelijk ziet het er dan zo uit:\nJe kunt de beweging nog verder verbeteren door een maximale snelheid te bepalen en de snelheid alleen te verhogen als die nog niet is bereikt. Je voegt dan een extra voorwaarde toe:\nNatuurlijk hoort springen (en daarna weer vallen) ook bij een platform spel. Een manier om dit voor elkaar te krijgen zie je in het blok hieronder, waarbij Het blok hieronder een paar dingen doet:\n als je een onderdeel van het platform raakt is je snelheid in de y-richting 0 als je op het platform staat en springt gaat je snelheid omhoog als je niet op het platform staat wordt je snelheid y-snelheid steeds hoger (je gaat naar beneden dus die wordt steeds meer negatief).  Licentie Deze instructies worden, net als alle andere instructies van CoderDojo Nijmegen, aangeboden onder een Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Licentie.  ","date":"August 27, 2020","permalink":"/instructies/scratch-videosensing/","title":"Scratch - Videosensing"},{"categories":null,"contents":"We gaan met 2D game \u0026ldquo;framework\u0026rdquo; Löve2D een shooter bouwen.\nWe gaan een eenvoudige shooter maken. Deze instructie is een vertaling en bewerking van een tutorial gemaakt door \u0026gt;_OSMSTUDIOS.\nWat leer je? Tijdens de Dojo\u0026rsquo;s over Scratch hebben jullie kennis gemaakt met variabelen en functies (blokken). Daar gaan we mee verder.\nIn Scratch kun je met drag-and-drop variabelen en functies combineren tot een programma, maar bij de meeste programmeertalen wordt het programma in tekst geschreven. Dat is ook het geval bij Löve. We gaan dus typen.\nOm het geen type sessie te laten zijn, zijn een aantal functies, net als bij Scratch, al voor jullie gemaakt. Je hoeft ze dus niet helemaal zelf meer te maken. Je hoeft ze alleen maar te gebruiken.\nBenodigdheden Om deze instructie te kunnen volgen, moet je Löve en een goede editor geïnstalleerd hebben. Verder moet je wat code downloaden om verder op te bouwen, maar dit wordt in stap 0 uitgelegd.\nInstallatie Löve Hopelijk heb je de installatie al voorbereid na het ontvangen van de uitnodiging voor deze Dojo. Als dat zo is, kun je dit hoofdstukje overslaan en doorgaan naar Stap 1.\nWindows Löve is op Windows gemakkelijk te installeren via één van de installers. Als alternatief kun je kiezen voor één van de zipbestanden en deze op een gewenste locatie unzippen. Maak het jezelf gemakkelijk door Löve op een eenvoudig te onthouden plek te installeren, bijvoorbeeld in de map\nc:\\love\\  Zie de Löve download pagina voor de installatie bestanden. Als je twijfelt tussen de 32- of 64-bits versie, kun je voor de zekerheid kiezen voor 32-bits versie of gewoon even checken welke versie je hebt.\nMac Download het zip bestand voor Mac en unzip het op de gewenste locatie.\nLinux Voor Ubuntu kun je kiezen voor het toevoegen van de Löve PPA of voor de installatie van één van de .deb bestanden.\nTekst editor Als je gaat programmeren is het handig om een editor te installeren met meer mogelijkheden dan \u0026lsquo;kladblok\u0026rsquo;. Sublime Text snapt Lua en dus Löve. Als alternatief kun je kiezen voor Notepad++.\nStappen TIP: de onderstaande stukken code hoef je niet over te typen. Je kunt ze natuurlijk gewoon copy-pasten in je editor.\nStap 0: installatie voorbereidde code Download the code van GitHub: Löve 2D shooter code De zip-file bevat een src/ folder. Kopieer de inhoud daarvan naar c:\\games\\shooter Om de voorbereidde code uit te voeren, druk je op de Windows knop en typ je \u0026lsquo;cmd\u0026rsquo;. Je krijgt dan een zwart venster. Typ dan cd c:\\games\\shooter om naar de folder te gaan waar je de code hebt neergezet. Typ tenslotte c:\\love\\love.exe .\\ om het programma te starten. Als alles goed gaat, krijg je een zwart venster.\nStap 1: teken het vliegtuig van de speler In deze stap doen we het volgende:\nWe laden het plaatje van het vliegtuig van de speler Tekenen het plaatje op het scherm Open main.lua in je tekst editor en type het volgende:\n-- variabele om het plaatje in op te slaan spelersVliegtuig = nil function love.load(arg) -- laadt het plaatje in de variabele spelersVliegtuig = love.graphics.newImage(\u0026#39;plaatjes/spelersVliegtuig.png\u0026#39;) end En vervolgens om op het scherm te tekenen:\nfunction love.draw(dt) -- teken het plaatje op het scherm love.graphics.draw(spelersVliegtuig, 100, 100) end Start je programmaatje en zie het resultaat:\nx en y as In de code hebben we bij het aanroepen van functie love.graphics.draw twee keer het getal 100 gebruikt. Deze worden gebruikt om de positie van het plaatje in het scherm te bepalen. Daarbij is positie 0,0 links bovenin. Bij 100,100 is het plaatje dus 100 stappen naar beneden en 100 naar rechts verschoven ten opzichte van 0,0. Voor de horizontale positie wordt vaak variabele naam x gebruikt en voor de verticale positie y.\nIn Scratch komen x en y waarden voor de plaats van een Sprite ook terug. Hieronder staat Scratch op x = 31 en y = -36\n Stap 2: eigenschappen van de speler Het vliegtuig van de speler staat nu nog stil op positie 100,100, maar zal natuurlijk van links naar rechts gaan bewegen als we wat verder zijn. Je zou kunnen zeggen dat de speler een aantal eigenschappen heeft:\n het plaatje de positie  Om die informatie bij elkaar te houden, vervangen we variabele spelersVliegtuig door een nieuwe variabele waarin meerdere eigenschappen opgeslagen kunnen worden:\n-- variabele om eigenschappen van de speler in op te slaan speler = { x = 200, y = 560, plaatje = nil } function love.load(arg) -- laadt het plaatje in eigenschap plaatje van de variabele speler speler.plaatje = love.graphics.newImage(\u0026#39;plaatjes/spelersVliegtuig.png\u0026#39;) end Het tekenen van het plaatje moet ook aangepast worden, zodat de nieuwe variabele met spelers eigenschappen gebruikt worden:\nfunction love.draw(dt) -- teken het plaatje op het scherm love.graphics.draw(speler.plaatje, speler.x, speler.y) end Start opnieuw je programma en zie dat het vliegtuig nu onder in het venster staat. De wijzigingen die je hebt gemaakt zijn een voorbereiding om plaatje te kunnen laten bewegen.\nStap 3: de speler bewegen Je programma toont nu alleen een stilstaand plaatje. Dat is natuurlijk niet erg interessant. In deze stap ga je het plaatje laten bewegen.\nBewegen met pijltjes Om het plaatje te horizontaal te laten bewegen, moet de speler.x eigenschap worden aangepast. De waarde van speler.x moet kleiner worden om naar links te bewegen en groter om naar rechts te bewegen. Je kunt dit ook eenvoudig uitproberen door de waarde 200 in de code groter of kleiner te maken en je programma te starten.\nOm het plaatje te laten bewegen terwijl het programma draait, moet het programma gaan reageren op toetsen van je toetsenbord. De pijl naar links zorgt voor een beweging naar links en de pijl naar rechts voor een beweging naar rechts:\nfunction love.update(dt) -- als pijltje naar links wordt ingedrukt if love.keyboard.isDown(\u0026#39;left\u0026#39;) then -- dan doe een stap naar links speler.x = speler.x - 1 -- als pijltje naar rechts wordt ingedrukt elseif love.keyboard.isDown(\u0026#39;right\u0026#39;) then -- dan doe een stap naar rechts speler.x = speler.x + 1 end end Als je voor het eerst naar programmeercode kijkt ziet het bovenstaande er ingewikkeld uit, maar vergelijk het eens met het bewegen met pijltjes in Scratch. love.update(dt) wordt steeds opnieuw uitgevoerd en is daarom vergelijkbaar met de \u0026lsquo;herhaal\u0026rsquo; in Scratch en \u0026lsquo;if \u0026hellip; then\u0026rsquo; is gelijk aan \u0026lsquo;als \u0026hellip; dan\u0026rsquo; in Scratch.\nAls je de programmeercode hebt ingevoerd, kun je het programma starten om uit te proberen of het werkt.\nProbeer ook eens een andere stapgrootte dan 1. Doet dat wat je ervan verwacht? Wat gebeurt er als je er een negatief getal van maakt? Kun je de code aanpassen, zodat je ook naar boven en beneden kunt bewegen (gebruik toetsen \u0026lsquo;up\u0026rsquo; voor naar boven en \u0026lsquo;down\u0026rsquo; voor naar beneden)? Wat gebeurt er als je bijvoorbeeld het pijltje naar rechts lang ingedrukt houdt?\nStoppen bij de rand Om te voorkomen dat het plaatje onzichtbaar wordt, moeten we voorkomen dat het verder beweegt als het aan de randen van het venster komt. Aan de linker kant is dat makkelijk: beweeg niet verder als speler.x gelijk is aan 0. In code ziet dat er als volgt uit:\n-- als pijltje naar links ingedrukt if love.keyboard.isDown(\u0026#39;left\u0026#39;) then -- en linker rand is nog niet bereikt if speler.x \u0026gt; 0 then -- dan doe een stap naar links speler.x = speler.x - 1 end Aan de rechter zijde is dat lastiger. Daar hangt de maximale \u0026lsquo;x\u0026rsquo; af van de breedte van het venster. De maximale waarde voor x is gelijk aan de breedte van het venster, of xRechterRand():\n-- als pijltje naar rechts ingedrukt elseif love.keyboard.isDown(\u0026#39;right\u0026#39;) then -- en de rechter rand is nog niet bereikt if speler.x \u0026lt; xRechterRand() then -- dan doe een stap naar rechts speler.x = speler.x + 1 end end Pas de code die je eerder bij stap 3 (bewegen met pijltjes) hebt geschreven aan, zodat je stopt bij de rand. Controleer ook of het plaatje nu niet aan de rechterkant verdwijnt. Voor de duidelijkheid hebben we de Scratch code ook aangepast en bijgevoegd (zie plaatje rechts).\nStap 4: de vijand Het spel draait natuurlijk niet alleen om het heen en weer bewegen van een vliegtuigje. Er is ook een vijand. In deze stap gaan we vijanden maken.\nWe beginnen met het tekenen van één vijand. Daarvoor voegen we één regel toe (bijna bovenaan je code) en we voegen een regel code toe aan de love.load() en love.draw() functies:\n-- variabelen om eigenschappen van de speler en vijand in op te slaan speler = { x = 200, y = 560, plaatje = nil } vijand = { x = 200, y = 0, plaatje = nil } function love.load(arg) -- laadt het plaatje in eigenschap plaatje van de variabele speler speler.plaatje = love.graphics.newImage(\u0026#39;plaatjes/spelersVliegtuig.png\u0026#39;) vijand.plaatje = love.graphics.newImage(\u0026#39;plaatjes/vijandsVliegtuig.png\u0026#39;) end function love.draw(dt) -- teken het plaatje op het scherm love.graphics.draw(speler.plaatje, speler.x, speler.y) love.graphics.draw(vijand.plaatje, vijand.x, vijand.y) end Probeer bovenstaande code uit.\nEr is nu één vijand en deze staat recht tegenover de speler. Een stilstaande vijand is niet zo interessant, dus we laten \u0026rsquo;m naar de speler bewegen. Dat kan vrij eenvoudig door het volgende aan de code toe te voegen aan je love.update(dt) functie:\nfunction love.update(dt) -- laat de vijand een stapje naar beneden doen  vijand.y = vijand.y + 1 Bovenstaande code werkt hetzelfde als het verplaatsen van de speler. Nu bewegen we alleen wel verticaal (van boven naar beneden). Daardoor moeten we y in plaats van x veranderen. De positie van de vijand wordt steeds met 1 stapje naar beneden verzet. Zo beweegt de vijand naar de speler toe.\nOm het plaatje van buiten het venster tevoorschijn te laten komen, moet de y positie aangepast worden naar -100. Pas de code bovenin je script aan door y = 0 te veranderen naar y = -100:\nvijand = { x = 200, y = -100, plaatje = nil } Onder aan het scherm vliegt de vijand het venster uit en is dan verdwenen. Het is natuurlijk leuker als er aan de bovenkant een nieuwe vijand verschijnt. Daarvoor moet je, net als bij het bewegend maken van de vijand, onderstaande code toevoegen aan love.update(dt):\n-- als de vijand de onderrand heeft bereikt if vijand.y \u0026gt; yOnderRand() then -- verplaats het dan uit het zicht boven het venster vijand.y = -100 end Om je te helpen met het begrijpen van de code: het verplaatsen van de vijand in Scratch zou er ongeveer zo uitzien:\nOm het nog interessanter te maken, zou het leuk zijn als de vijand niet steeds op dezelfde plaats van boven naar beneden beweegt. De waarde van vijand.x (horizontale positie) zou iedere keer anders moeten zijn. Gebruik daarvoor de functie xWillekeurig():\n-- als de vijand de onderrand heeft bereikt if vijand.y \u0026gt; yOnderRand() then -- verplaats het dan uit het zicht boven het venster vijand.y = -100 -- en zet de horizontale positie naar een willekeurige waarde vijand.x = xWillekeurig() end Wat je in Scratch zo zou doen:\nStap 5: meerdere vijanden We hebben nu een enkele vijand. Die is natuurlijk makkelijk te ontwijken. Spannender wordt het, als we er meerdere hebben. Daarvoor moeten we het één en ander aanpassen, de code die je eerder hebt geschreven voor één vijand, gaan we vervangen met code voor meerdere vijanden. Je moet hier en daar dus code verwijderen!\nAllereerst hebben we een lijst met vijanden nodig, die voegen we bovenaan de code toe, bij \u0026lsquo;speler\u0026rsquo;. Variabelen staan vaak bovenaan in code:\n-- variabelen om eigenschappen van de speler in op te slaan speler = { x = 200, y = 560, plaatje = nil } -- lijst om vijanden in op te slaan vijanden = {} Een andere variabele die we nodig hebben is het plaatje van de vijand. Eerder deden we dat in de functie love.draw(dt) met speler.plaatje. Die regel mag nu verwijderd worden en in plaats daarvan zetten we bij de variabelen \u0026lsquo;speler\u0026rsquo; en \u0026lsquo;vijanden\u0026rsquo; ook het plaatje voor de vijand:\n-- laad het plaatje van de vijand vijandPlaatje = love.graphics.newImage(\u0026#39;plaatjes/vijandsVliegtuig.png\u0026#39;) De vijanden moeten ook getekend worden, zorg ervoor dat jouw love.draw(dt) functie eruit ziet zoals hieronder:\nfunction love.draw(dt) -- teken het plaatje op het scherm love.graphics.draw(speler.plaatje, speler.x, speler.y) -- teken de vijanden in de lijst tekenVijanden(vijanden) end Er worden alleen vijanden getekend die bestaan, daarom moeten vijanden ook aangemaakt worden:\nfunction love.update(dt) maakNieuweVijand(vijanden) In de vorige stap hebben we de vijand laten bewegen. Deze code moeten we nu voor iedere vijand in de lijst uitvoeren:\nfunction love.update(dt) maakNieuweVijand(vijanden) -- voor elke vijand in de lijst  for index, vijand in ipairs(vijanden) do -- laat de vijand een stapje naar beneden doen  vijand.y = vijand.y + 2 -- als de vijand de onderrand heeft bereikt if vijand.y \u0026gt; yOnderRand() then -- verwijder de vijand table.remove(vijanden, index) end end Het maken en verwijderen van vijanden zoals we dat hierboven doen is in Scratch heel lastig. We geven daarom geen voorbeeld van het bovenstaande in Scratch. Waar het kan doen we dat wel.\nVoer het programma uit. Als het goed is ziet het eruit als onderstaande plaatje:\nStap 6: de vijand ontwijken Als de speler een vijand raakt, is het spel afgelopen. Om te zien of de speler een vijand geraakt heeft, hebben we functie spelerHeeftVijandGeraakt().\nAls het resultaat van de functie waar (true) is, dan moet het spel gestopt worden.\nVoeg daarvoor de volgende code toe aan functie love.update(dt):\n-- als de speler een vijand geraakt heeft if spelerHeeftVijandGeraakt() then -- is het spel afgelopen spelIsAfgelopen = true end In variabele spelIsAfgelopen wordt bijgehouden of het spel nog loopt of al is afgelopen. Als het is afgelopen, wordt de speler niet langer getekend. Pas daarvoor functie love.draw(dt) aan door het tekenen van de speler binnen een if statement te plaatsen:\nfunction love.draw(dt) -- als het spel nog niet is afgelopen if spelIsAfgelopen == false then -- teken het plaatje op het scherm love.graphics.draw(speler.plaatje, speler.x, speler.y) end In Scratch zou het er zo uitzien:\nVergeet niet om bovenaan het bestand de variabele toe te voegen:\nspelIsAfgelopen = false Als je nu het spel speelt, wordt het spelersvliegtuig niet meer getekend als je een vijand hebt geraakt.\nStap 7: schieten De stap schieten lijkt op een combinatie van stappen 4 en 5..\nEr moet een lijst worden toegevoegd voor de kogels:\n-- variabelen om eigenschappen van de speler in op te slaan speler = { x = spelerX, y = spelerY, plaatje = nil } -- lijst om vijanden in op te slaan vijanden = {} -- lijst om kogels in op te slaan kogels = {} Het plaatje van de kogel moet worden geladen:\n-- laad het plaatje van de vijand vijandPlaatje = love.graphics.newImage(\u0026#39;plaatjes/vijandsVliegtuig.png\u0026#39;) -- laad het plaatje van de kogel kogelPlaatje = love.graphics.newImage(\u0026#39;plaatjes/kogel.png\u0026#39;) En het plaatje moet worden getekend, dat doe je in de love.draw(dt) functie:\n-- teken de kogels in de lijst tekenKogels(kogels) In tegenstelling tot de vijanden, worden nieuwe kogels alleen aangemaakt als de speler de spatiebalk indrukt. In de love.update(dt) functie voeg je het volgende toe:\nif spelIsAfgelopen == false then -- als de spatiebalk wordt ingedrukt if love.keyboard.isDown(\u0026#39;space\u0026#39;) then -- schiet dan maakNieuweKogel(kogels, speler) end maakNieuweVijand(vijanden)  Als je de code tot nu toe uitprobeert, krijg je wel een kogels te zien, maar die bewegen niet, het ziet eruit als het plaatje hieronder.\nAan de love.update(dt) functie moet nog wat extra code worden toegevoegd om de kogels te laten bewegen. Elke kogel in de lijst laten we telkens vier stappen omhoog gaan en als een kogel uit beeld verdwijnt, halen we de kogel ook uit de lijst:\nif spelIsAfgelopen == false then -- als de spatiebalk wordt ingedrukt if love.keyboard.isDown(\u0026#39;space\u0026#39;) then -- schiet dan maakNieuweKogel(kogels, speler) end -- voor elke kogel in de lijst for index, kogel in ipairs(kogels) do -- beweeg de kogel naar boven kogel.y = kogel.y - (2 * stapGrootte) -- als de kogel de bovenrand heeft bereikt if kogel.y \u0026lt; -20 then -- verwijder het uit de lijst table.remove(kogels, index) end end maakNieuweVijand(vijanden)  Dat ziet er beter uit!\nStap 8: raken en scoren De vijanden vliegen, je kunt je vliegtuig richten en je kunt schieten. Maar je schoten raken nog niets en de vijanden vliegen door. Daar gaan we in deze stap wat aan doen.\nFunctie kogelHeeftVijandGeraakt() laat ons weten of een kogel een vijand geraakt heeft. Ook verwijderd deze functie de geraakte vijand en de kogel:\n-- als de kogel een vijand geraakt heeft if kogelHeeftVijandGeraakt() then -- heb je een punt gescoord score = score + 1 end Voeg bovenstaande code toe aan love.update(dt). Om de score in op te slaan, moet je ook nog een variabele aanmaken boven aan het bestand:\nscore = 0 In Scratch ziet het er zo uit:\nWe willen natuurlijk de score kunnen zien, dus moeten we die in het scherm afdrukken. Voeg daarvoor in love.draw(dt) het volgende toe:\n-- zet de tekstkleur op wit love.graphics.setColor(255, 255, 255) -- en druk de score af love.graphics.print(\u0026#34;SCORE: \u0026#34; .. tostring(score), 400, 10) Stap 9: opnieuw starten Mocht je een vijand aanraken, dan is het spel afgelopen, maar dan wil je natuurlijk wel opnieuw kunnen beginnen. Daarvoor gaan we code toevoegen aan love.update(dt):\n-- als de o van opnieuw wordt ingedrukt if love.keyboard.isDown(\u0026#39;o\u0026#39;) then -- wordt het spel opnieuw gestart kogels = {} vijanden = {} score = 0 spelIsAfgelopen = false end Als je op \u0026lsquo;o\u0026rsquo; drukt begint je spel opnieuw. Het spel is nu klaar!\nVoorbereide functies Bij het maken van het spelletje heb je gebruik gemaakt van een aantal voorbereide functies. Als je je nu afvraagt hoe die functies zijn gemaakt, dan kun je eens kijken in bestand functies.lua.\nVoorbeeld code Mocht je nu ook nog een voorbeeld van de volledige code willen bekijken, dan moet je eens kijken in voorbeeld.lua.\nConclusie Het spelletje is af en je hebt geleerd hoe je vrij gemakkelijk een 2D shooter kunt maken met Löve.\nVervolg Als je meer wilt maken met Löve, dan zijn er meerdere instructies (in het Engels: tutorials) op het internet te vinden. Helaas zijn die wel vrijwel allemaal Engelstalig.\nEen overzicht vind je op site van Löve zelf: https://love2d.org/wiki/Category:Tutorials.\nLicentie Deze instructies worden, net als alle andere instructies van CoderDojo Nijmegen, aangeboden onder een Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Licentie.  ","date":"August 26, 2020","permalink":"/instructies/love2d-shooter/","title":"Löve2D - Shooter"},{"categories":null,"contents":"Deze keer gaan we tekenen met Python Turtle.\nTurtle introductie Commando\u0026rsquo;s Python Interpreter Start Thonny.\nType onderin (je hoeft de \u0026raquo;\u0026gt; niet te typen):\n\u0026gt;\u0026gt;\u0026gt; from turtle import *  Hiermee geef je Python de opdracht om de turtle te gebruiken.\nTekenen Je turtle kan voor je tekenen door hem opdrachten te geven. Type het volgende:\n\u0026gt;\u0026gt;\u0026gt; forward(100)  Met dit commando gaat je turtle 100 stapjes vooruit. Als dat nog niet gebeurd was, moet nu een scherm zijn geopend, waarin je de de turtle en een lijn kan zien.\nDe turtle kan ook achteruit:\n\u0026gt;\u0026gt;\u0026gt; backward(100)  Dikkere lijnen Je kan je lijnen dikker maken met width(). Probeer deze commando\u0026rsquo;s maar eens uit:\n\u0026gt;\u0026gt;\u0026gt; width(5) \u0026gt;\u0026gt;\u0026gt; forward(100) \u0026gt;\u0026gt;\u0026gt; width(2) \u0026gt;\u0026gt;\u0026gt; forward(100) \u0026gt;\u0026gt;\u0026gt; width(1) \u0026gt;\u0026gt;\u0026gt; forward(100)  Tip: met de pijltjestoetsen (omhoog en omlaag) op je toetsenbord kun je eerdere commando\u0026rsquo;s terug halen. Met enter kun je die dan opnieuw uitvoeren.\nDraaien Je kan je turtle laten draaien:\n\u0026gt;\u0026gt;\u0026gt; right(90)  Hiermee draait de turtle 90 graden naar rechts. Als je niet weet wat 90 graden betekent, kun je verschillende getallen uitproberen. Je kan ook naar links draaien. Probeer deze commando\u0026rsquo;s maar eens uit:\n\u0026gt;\u0026gt;\u0026gt; left(45) \u0026gt;\u0026gt;\u0026gt; forward(100) \u0026gt;\u0026gt;\u0026gt; right(180) \u0026gt;\u0026gt;\u0026gt; forward(100) \u0026gt;\u0026gt;\u0026gt; left(360) \u0026gt;\u0026gt;\u0026gt; forward(100)  Kleur Je turtle en de lijnen zijn nu nog zwart. Je kan de kleur van de turtle en de achtergrond kleur makkelijk veranderen. Probeer deze commando\u0026rsquo;s eens uit en kijk bij elk commando wat er verandert op je scherm:\n\u0026gt;\u0026gt;\u0026gt; color('green') \u0026gt;\u0026gt;\u0026gt; forward(100) \u0026gt;\u0026gt;\u0026gt; bgcolor('yellow') \u0026gt;\u0026gt;\u0026gt; color('red') \u0026gt;\u0026gt;\u0026gt; forward(100)  Experimenteer vooral ook met andere kleuren! Onderin deze pagina zie je een overzichtje van allerlei verschillende kleuren.\nOpnieuw beginnen Je kan de tekening die de turtle heeft gemaakt verwijderen:\n\u0026gt;\u0026gt;\u0026gt; clear()  Je kan ook helemaal opnieuw beginnen:\n\u0026gt;\u0026gt;\u0026gt; reset() \u0026gt;\u0026gt;\u0026gt; bgcolor('white')  Opdrachten Probeer de onderstaande plaatjes eens na te tekenen met je turtle. Gebruik na elke opdracht het reset() commando om aan de volgende te beginnen. De achtergrondkleur staat telkens ingesteld op \u0026lsquo;black\u0026rsquo;.\nOpdracht 1-A kleur: \u0026lsquo;green\u0026rsquo;\nOpdracht 1-B kleuren: \u0026lsquo;lightblue\u0026rsquo; en \u0026lsquo;yellow\u0026rsquo;\nOpdracht 1-C kleuren: \u0026lsquo;darkkhaki\u0026rsquo; en \u0026lsquo;red\u0026rsquo;.\nKleuren overzicht Hier zijn verschillende kleuren die je kan gebruiken voor color() of bgcolor().\nPython introductie Variabelen en loops Variabelen Probeer deze code eens uit en kijk goed wat er gebeurt:\n\u0026gt;\u0026gt;\u0026gt; getal = 45 \u0026gt;\u0026gt;\u0026gt; forward(getal) \u0026gt;\u0026gt;\u0026gt; right(getal) \u0026gt;\u0026gt;\u0026gt; forward(getal) \u0026gt;\u0026gt;\u0026gt; getal = 90 \u0026gt;\u0026gt;\u0026gt; right(getal) \u0026gt;\u0026gt;\u0026gt; forward(getal)  Het woord \u0026ldquo;getal\u0026rdquo; is hier een variabele. Een variabele heeft een naam die je zelf kiest en een waarde. Die waarde begint hier als 45 en wordt later ingesteld als 90.\nJe kan Python ook rekensommetjes laten maken en de uitkomst in een variabele stoppen. Om te weten wat voor waarde een variabele heeft, type je de naam van de variabele in en druk je op enter. Probeer maar eens uit:\n\u0026gt;\u0026gt;\u0026gt; getal1 = 1 + 1 \u0026gt;\u0026gt;\u0026gt; getal1 2 \u0026gt;\u0026gt;\u0026gt; getal2 = 9 - getal1 \u0026gt;\u0026gt;\u0026gt; getal2 7 \u0026gt;\u0026gt;\u0026gt; getal3 = getal2 * 2 \u0026gt;\u0026gt;\u0026gt; getal3 14 \u0026gt;\u0026gt;\u0026gt; getal4 = 28 / getal3 \u0026gt;\u0026gt;\u0026gt; getal4 2.0  Zoals je ziet: \u0026lsquo;*\u0026rsquo; betekent vermenigvuldigen, en \u0026lsquo;/\u0026rsquo; is delen door.\nHerhaling Je kan bepaalde commando\u0026rsquo;s ook meerdere keren laten uitvoeren, dat noemen we een loop:\n\u0026gt;\u0026gt;\u0026gt; for teller in range(4): ... forward(100) ... right(90)  Let op: Nadat je dit getypt hebt moet je nog een keer op enter drukken, zodat Python weet dat je klaar bent met je loop.\nIn dit voorbeeld is \u0026ldquo;teller\u0026rdquo; een variabele die optelt en range() geeft aan tot welk getal geteld moet worden. Teller begint bij 0 en telt tot 4. Als je nu de waarde van teller vraagt, zie je dat het tellen is opgehouden voordat 4 werd bereikt:\n\u0026gt;\u0026gt;\u0026gt; teller 3  Je kan teller dus ook gebruiken in je turtle opdrachten! Kun jij voorspellen wat er gebeurt als je onderstaande commando\u0026rsquo;s intypt?\n\u0026gt;\u0026gt;\u0026gt; for teller in range(1,5): ... forward(50 * teller) ... right(90)  Met range(1,5) begint het tellen bij 1 en eindigt op 4 (voordat de 5 wordt bereikt).\nFiguren tekenen Veelhoek Met een klein rekensommetje kun je ook een veelhoek tekenen! Om een veelhoek te tekenen moet je weten wat voor hoek je turtle moet maken. Gelukkig kan Python dat voor je berekenen: om de turtle helemaal rond te laten gaan moet deze 360 graden gedraaid zijn.\n\u0026gt;\u0026gt;\u0026gt; aantal_punten = 5 \u0026gt;\u0026gt;\u0026gt; hoek = 360 / aantal_punten \u0026gt;\u0026gt;\u0026gt; for teller in range(aantal_punten): ... forward(100) ... right(hoek)  Wat gebeurt er nu als je de variabele aantal_punten een hoger getal geeft?\nSter De hoek die je nodig hebt voor een ster is moeilijker te berekenen. Sommige sterren zijn niet eens in 1 lijn te tekenen, bijvoorbeeld de 6-puntige ster. De 5-puntige ster is makkelijker:\n\u0026gt;\u0026gt;\u0026gt; hoek = 144 \u0026gt;\u0026gt;\u0026gt; for teller in range(5): ... forward(100) ... right(hoek)  Opdrachten Probeer de onderstaande figuren te tekenen.\nOpdracht 2-A Tip: De hoek is 150 graden.\nOpdracht 2-B Uitdaging: probeer zo min mogelijk commando\u0026rsquo;s te gebruiken om de opdracht uit te voeren. Lukt het in 5 regels? Vraag een mentor om tips!\nOpdracht 2-C Tip: Gebruik een zo klein mogelijke waarde in je forward() zodat de cirkel niet te groot wordt!\nTurtle voor gevorderden Meer turtle commando\u0026rsquo;s Vormen en stempels Je turtle lijkt tot nu toe niet echt op een schildpad, maar dat kun je veranderen:\n\u0026gt;\u0026gt;\u0026gt; shape('turtle') \u0026gt;\u0026gt;\u0026gt; color('darkgreen')  Met shape() kun je dus de vorm veranderen. Andere vormen zijn “arrow”, “circle”, “square”, “triangle” en “classic”.\nJe turtle kan ook stempelen, net als in Scratch. Probeer deze commando\u0026rsquo;s eens uit en kijk na elke stap wat er gebeurt:\n\u0026gt;\u0026gt;\u0026gt; shape('circle') \u0026gt;\u0026gt;\u0026gt; color('red') \u0026gt;\u0026gt;\u0026gt; stempel1 = stamp() \u0026gt;\u0026gt;\u0026gt; right(90) \u0026gt;\u0026gt;\u0026gt; forward(50) \u0026gt;\u0026gt;\u0026gt; shape('square') \u0026gt;\u0026gt;\u0026gt; color('yellow') \u0026gt;\u0026gt;\u0026gt; stempel2 = stamp()∏ \u0026gt;\u0026gt;\u0026gt; forward(50) \u0026gt;\u0026gt;\u0026gt; shape('triangle') \u0026gt;\u0026gt;\u0026gt; color('blue') \u0026gt;\u0026gt;\u0026gt; stempel3 = stamp() \u0026gt;\u0026gt;\u0026gt; forward(50) \u0026gt;\u0026gt;\u0026gt; shape('classic') \u0026gt;\u0026gt;\u0026gt; clearstamp(stempel2)  Elke keer dat we stempelen, met stamp(), maken we ook een variabele aan. Die variabelen kunnen we gebruiken om stempels die we gedrukt hebben te verwijderen, met clearstamp(). Daarom is het handig om ze een naam te geven zoals stempel1, stempel2, etc. Dan weet je later nog precies welke stempel dat is geweest.\nTurtle posities Tot nu toe hebben we de turtle verplaatst door vooruit/achteruit te gaan en te draaien, maar je kan ook de turtle opdracht geven om naar een bepaalde plek te gaan:\n\u0026gt;\u0026gt;\u0026gt; setpos(50,50) \u0026gt;\u0026gt;\u0026gt; setpos(-25,75) \u0026gt;\u0026gt;\u0026gt; setpos(0,0)  Om erachter te komen wat elk getal betekent, kun je het beste 1 van de 2 veranderen en dan zien wat er gebeurt. Het eerste getal noemen we de X-as, het tweede getal noemen we de Y-as.\nSoms wil je de turtle verplaatsen zonder dat er een lijn wordt getekend. Je turtle kan zijn pen optillen en neerzetten met penup() en pendown(). Om bijvoorbeeld een vork te tekenen, schrijf je dit:\n\u0026gt;\u0026gt;\u0026gt; left(90) \u0026gt;\u0026gt;\u0026gt; backward(100) \u0026gt;\u0026gt;\u0026gt; forward(125) \u0026gt;\u0026gt;\u0026gt; setpos(0,0) \u0026gt;\u0026gt;\u0026gt; left(90) \u0026gt;\u0026gt;\u0026gt; forward(25) \u0026gt;\u0026gt;\u0026gt; right(90) \u0026gt;\u0026gt;\u0026gt; forward(25) \u0026gt;\u0026gt;\u0026gt; penup() \u0026gt;\u0026gt;\u0026gt; setpos(0,0) \u0026gt;\u0026gt;\u0026gt; pendown() \u0026gt;\u0026gt;\u0026gt; right(90) \u0026gt;\u0026gt;\u0026gt; forward(25) \u0026gt;\u0026gt;\u0026gt; left(90) \u0026gt;\u0026gt;\u0026gt; forward(25) \u0026gt;\u0026gt;\u0026gt; penup() \u0026gt;\u0026gt;\u0026gt; setpos(0,0)  Je kan aan je turtle vragen wat zijn X positie is en wat zijn Y positie is. Je kan die positie ook opslaan in variabelen, zodat je ze later kan gebruiken:\n\u0026gt;\u0026gt;\u0026gt; left(30) \u0026gt;\u0026gt;\u0026gt; forward(100) \u0026gt;\u0026gt;\u0026gt; xcor() 86.60254037844388 \u0026gt;\u0026gt;\u0026gt; ycor() 49.99999999999999 \u0026gt;\u0026gt;\u0026gt; x = xcor() \u0026gt;\u0026gt;\u0026gt; setpos(x, 0) \u0026gt;\u0026gt;\u0026gt; setpos(0, 0)  Inkleuren Je turtle tekent mooie lijnen, maar je vormen kunnen ook ingekleurd worden:\n\u0026gt;\u0026gt;\u0026gt; bgcolor('black') \u0026gt;\u0026gt;\u0026gt; color('green') \u0026gt;\u0026gt;\u0026gt; fillcolor('darkgreen') \u0026gt;\u0026gt;\u0026gt; width(3) \u0026gt;\u0026gt;\u0026gt; begin_fill() \u0026gt;\u0026gt;\u0026gt; for x in range(4): ... forward(100) ... right(90) ... \u0026gt;\u0026gt;\u0026gt; end_fill()  Let op dat het invullen pas gebeurt bij end_fill(). Je kan de invulkleur kiezen met fillcolor(). Als je geen invulkleur kiest, wordt de kleur van je pen gebruikt.\nDeze techniek wordt echt indrukwekkend als je het gebruikt bij meer ingewikkelde tekeningen. Met deze code teken je bijvoorbeeld een mooie geel-zwarte ster:\n\u0026gt;\u0026gt;\u0026gt; color('yellow') \u0026gt;\u0026gt;\u0026gt; bgcolor('black') \u0026gt;\u0026gt;\u0026gt; begin_fill() \u0026gt;\u0026gt;\u0026gt; for x in range(18): ... forward(200) ... left(100) ... \u0026gt;\u0026gt;\u0026gt; end_fill()  Tekst en turtle verbergen De laatste twee technieken die we hier behandelen spreken bijna voor zich. Probeer de onderstaande code maar eens om een deurmat te tekenen. Welke commando\u0026rsquo;s ken je nog niet? Snap je waar ze voor bedoeld zijn?\n\u0026gt;\u0026gt;\u0026gt; write('Welkom!') \u0026gt;\u0026gt;\u0026gt; penup() \u0026gt;\u0026gt;\u0026gt; setpos(-20,20) \u0026gt;\u0026gt;\u0026gt; pendown() \u0026gt;\u0026gt;\u0026gt; for x in range(2): ... forward(70) ... right(90) ... forward(40) ... right(90) ... \u0026gt;\u0026gt;\u0026gt; hideturtle()  Tip: hideturtle() is ook een handig commando bij het stempelen. Om de turtle weer te tonen gebruik je showturtle().\nOpdrachten Probeer de onderstaande tekeningen na te maken, of bedenk je eigen tekeningen.\nOpdracht 3-A Schildpadden in een zandbak\nOpdracht 3-B TODO: een klok, een ruiten 3 speelkaart.\nAntwoorden Mocht je er niet uitkomen, dan kun je hier klikken voor antwoorden.  Let op: de volgende lijn ontbreekt aan de bovenkant van deze voorbeelduitwerkingen: from turtle import *  Deel 1 Opdracht 1-A bgcolor(\u0026#39;black\u0026#39;) color(\u0026#39;green\u0026#39;) width(5) forward(100) right(90) forward(100) right(90) forward(100) right(90) forward(100) right(90) Opdracht 1-B bgcolor(\u0026#39;black\u0026#39;) color(\u0026#39;yellow\u0026#39;) width(3) left(90) forward(50) right(90) forward(200) right(90) forward(100) right(90) forward(200) right(90) forward(50) color(\u0026#39;lightblue\u0026#39;) width(1) right(45) forward(100) right(90) forward(100) right(90) forward(100) right(90) forward(100) Opdracht 1-C bgcolor(\u0026#39;black\u0026#39;) color(\u0026#39;darkkhaki\u0026#39;) width(5) forward(200) right(90) forward(100) right(90) forward(200) right(90) forward(100) color(\u0026#39;red\u0026#39;) width(2) right(45) forward(100) right(90) forward(100) color(\u0026#39;darkkhaki\u0026#39;) right(45) forward(100) Deel 2 Opdracht 2-A Tip: 12 x 150 = 1800, en 1800 / 360 = 5. Omdat 1800 deelbaar is door 360, komen de hoeken precies goed uit voor een ster. bgcolor(\u0026#39;black\u0026#39;) color(\u0026#39;lightblue\u0026#39;) width(3) for i in range(12): forward(100) right(150) Opdracht 2-B bgcolor(\u0026#39;black\u0026#39;) color(\u0026#39;lightblue\u0026#39;) width(3) for i in range(4): for j in range(3): forward(100) right(120) right(90) Opdracht 2-C Tip: In plaats van 360 en 1 kan je ook andere getallen kiezen. Zorg dat deze keer elkaar 360 zijn. bgcolor(\u0026#39;black\u0026#39;) color(\u0026#39;lightblue\u0026#39;) width(3) for i in range(360): forward(2) right(1) Deel 3 Opdracht 3-A In deze voorbeelduitwerking staan 2 stempels. Je kan er zelf nog een paar toevoegen als je wil! bgcolor(\u0026#39;black\u0026#39;) color(\u0026#39;yellow\u0026#39;) width(5) fillcolor(\u0026#39;lightyellow\u0026#39;) begin_fill() setpos(0,200) setpos(200,200) setpos(200,0) setpos(0,0) end_fill() penup() setpos(50,50) shape(\u0026#39;turtle\u0026#39;) color(\u0026#39;green\u0026#39;) stempel1 = stamp() setpos(84,129) right(120) shape(\u0026#39;turtle\u0026#39;) color(\u0026#39;blue\u0026#39;) stempel2 = stamp()    Licentie Deze instructies worden, net als alle andere instructies van CoderDojo Nijmegen, aangeboden onder een Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Licentie.  ","date":"August 24, 2020","permalink":"/instructies/python-turtle/","title":"Python - Turtle"},{"categories":null,"contents":"We gaan met Scratch het klassieke spel Snake bouwen.\nBenodigdheden Deze opdrachten maak je met Scratch. Als je nog geen account had, maak dit dan eerst aan.\nZet in Scratch eerst de taal op Nederlands via de wereldbol linksboven.\nInleiding In deze opdracht ga je het klassieke spelletje Snake, dus Slang, programmeren. Je bestuurt in dit spelletje een slang en je doel is door zo veel mogelijk te eten zo lang mogelijk te worden. Maar pas op, als je in je eigen staart bijt dan ben je af!\nDit zijn de stappen die je gaat programmeren:\n Maak de slang Zorg dat de slang kan bewegen Laat het eten van de slang verschijnen Maak de slang langer door het eten Laat het spel eindigen als de slang in de eigen staart bijt  Als je dan nog zin (en tijd) hebt dan zijn er nog allerlei uitbreidingen mogelijk.\nAls startpunt voor de opdracht kun je dit project gebruiken (je kunt dan stap 1 van de opdraht overslaan). Je kunt het project zelf gaan bewerken door op de Remix knop boven in Scratch te klikken:\nDe opdracht is afgeleid van deze instructies (Github bron).\nMaak de slang Als je gekozen hebt het project helemaal vanaf het begin te doen, ontwerp dan je eigen slang of download deze plaatjes om de twee uiterlijken van de slang mee te maken:\nVolg deze stappen om een sprite van de slang te maken:\n Klik op het icoon voor een nieuwe sprite (rechtsonder, plaatje van de kat) en kies voor Upload sprite. Upload het hoofd van de slang. Ga naar het tabblad Uiterlijken (linksboven, rechts naast het Code tabblad). Klik op het icoon voor een nieuw uiterlijk (linksonder, plaatje van de kat) en kies voor Upload uiterlijk. Upload het lijf van de slang. Klik nu op het hoofd van de slang.  Zorg dat de slang kan bewegen Het is de bedoeling om de slang met de pijltjestoetsen te laten bewegen. Er zijn verschillende manieren om dit te doen, bijvoorbeeld zo:\nwanneer [pijltje omhoog v] is ingedrukt richt naar (0) graden neem (5) stappen  Met richt naar 0 graden draai je het hoofd van de slang naar boven, met neem 5 stappen beweegt de slang 5 stappen in die richting. Maar\u0026hellip; als je de toets loslaat, dan houdt de slang op met bewegen.\nOpdracht Zorg dat de slang doorgaat met bewegen totdat je een andere kant op gaat. Tip 1: hiervoor heb je het herhaal blok uit het menu Besturen nodig. Tip 2: begin het programma met het wanneer op de vlag wordt geklikt blok uit het menu Gebeurtenissen.\nKlik om de voorbeeldcode te laten zien om de slang omhoog te laten bewegen  wanneer groene vlag wordt aangeklikt herhaal als \u0026lt;toets [pijltje omhoog v] ingedrukt?\u0026gt; dan richt naar (0) graden end neem (10) stappen wacht (0.1) sec.    In de voorbeeldcode wordt het blok wacht 0.1 sec. gebruikt. Dit is niet nodig om de slang te laten bewegen, maar wordt verderop in het spel belangrijk. Door de wachttijd en/of het aantal stappen dat de slang zet te veranderen kun je de snelheid van de slang bepalen.\nLaat de appels verschijnen Nu is het tijd om de slang eten te geven. Dit voorbeeld gaat uit van appels, je kunt natuurlijk ook iets heel anders verzinnen. Om het lekker onvoorspelbaar te maken waar de appel verschijnt, is het blok ga naar willekeurige positie uit het menu Beweging heel geschikt.\nOpdracht Maak een nieuwe sprite voor de appel, en zorg dat er bij het begin van het spel een appel verschijnt. Tip: zorg dat je de appel-sprite hebt gekozen, zodat de code die je maakt ook echt bepaalt wat de appel moet doen.\nKlik om de voorbeeldcode te laten zien  wanneer groene vlag wordt aangeklikt ga naar (willekeurige positie)    De volgende stap is om een \u0026ldquo;nieuwe\u0026rdquo; appel op een andere plek te laten verschijnen wanneer de slang er een heeft opgegeten. Hiervoor maak je niet echt een nieuwe appel, maar je laat de appel-sprite gewoon op een andere plek verschijnen.\nOpdracht Laat de appel op een andere plek verschijnen als de slang er een heeft opgegeten. Tip: hiervoor kun je het blok raak ik \u0026hellip; uit het menu Waarnemen gebruiken.\nKlik om de voorbeeldcode te laten zien  wanneer groene vlag wordt aangeklikt ga naar (willekeurige positie) herhaal als \u0026lt;raak ik (slang hoofd v)?\u0026gt; dan ga naar (willekeurige positie) end    Maak de slang langer Van al die appels groeit de slang natuurlijk wel! Het is nu tijd om de slang langer te maken als je een appel eet. Hiervoor is het eerst nodig dat je bijhoudt hoeveel appels de slang al heeft gegeten, dat kun je ook meteen als je score in het spel gebruiken!\nOpdracht Hou het aantal gegeten appels bij. Tip 1: hiervoor heb je een variabele nodig, deze maak je in het menu Variabelen. Tip 2: zet aan het begin van het spel de waarde van de variabele op 0.\nKlik om de voorbeeldcode te laten zien  wanneer ik als kloon start als \u0026lt;raak ik kleur [#9afeb6]?\u0026gt; dan stop [alle v]    Uitbreidingen Je kunt het spel natuurlijk nog veel mooier, spannender en moeilijker maken. Hier heb je alvast een lijstje met ideeën als je nog verder wil programmeren aan Snake:\n laat de appels na een tijdje weer verdwijnen maak een start- of eindscherm voor het spel laat de slang sneller gaan als je meer appels hebt gegeten laat het spel ook afgelopen zijn als je de rand raakt kies een mooie achtergrond voor je spel laat ook voorwerpen verschijnen die je juist moet ontwijken programmeer het spel voor twee spelers  Licentie Deze instructies worden, net als alle andere instructies van CoderDojo Nijmegen, aangeboden onder een Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Licentie.  ","date":"August 22, 2020","permalink":"/instructies/scratch-snake/","title":"Scratch - Snake"},{"categories":null,"contents":"Wie zijn we? Pieter Buur | Champion Na meer dan tien jaar onderzoek naar de hersenen gedaan te hebben met MRI, werkt Pieter tegenwoordig als data scientist en ontwikkelt bijvoorbeeld chatbots en manieren om interessante informatie uit teksten (zoals nieuwsberichten) te halen.\nIn zijn vrije tijd vindt Pieter het leuk – ook samen met zijn dochters en soms op school – bezig te zijn met allerlei soorten electronica zoals robots, micro:bit en Arduino.\n Bas Hopman | Mentor Bas is een all-round software ontwikkelaar bij Signify (voormalig Philips Lighting) in Eindhoven. Van origine een elektrotechnicus, maar al 20 jaar bezig met software in werk en hobby. Hij heeft software gemaakt voor lampen elektronica, Linux mini computers, websites, systeem testen en diverse scriptjes. Gebruikte programmeertalen zijn o.a. ANSI-C, Java, Python, SQL, HTML, JavaScript en PHP.\nHij leert zelf nog altijd graag en vind het ook leuk om zijn enthousiasme en kunde over te brengen aan kinderen. Zijn twee kinderen zijn ook geïnteresseerd en zul je zo af en toe ook zien tijdens een Dojo.\n Daan Willems | Mentor Jaap Meijers | Mentor Rik Bosch | Mentor Kevin van den Broek | Mentor Tjeerd van der Zee | Mentor Ook lid worden van het team? CoderDojo Nijmegen is altijd op zoek naar vrijwilligers. Kijk ook op pagina meehelpen.\n","date":"February 9, 2020","permalink":"/team/","title":"Team"},{"categories":null,"contents":"Wat is Stichting CoderDojo Nijmegen? De stichting CoderDojo Nijmegen wil kinderen op jonge leeftijd in staat stellen hun interesse voor IT te ontdekken en te ontplooien. De gemiddelde ouder en/of leerkracht heeft onvoldoende kennis en middelen om kinderen te laten verdiepen in IT, anders dan als consument. Tegelijkertijd is de IT een vakgebied dat zich razendsnel ontwikkelt. Het is daarom zinvol om je hierin zo vroeg mogelijk te verdiepen.\nDe stichting CoderDojo Nijmegen plaatst jonge kinderen in de rol van producent van IT (games, websites, etc.). Op deze manier kunnen kinderen experimenteren met hun digitale omgeving en worden ze bewust van de werking ervan. Naast bewustwording maakt de stichting CoderDojo Nijmegen het voor kinderen mogelijk om op jonge leeftijd een eventuele passie te ontdekken in een vertrouwde omgeving. Door de kinderen zelf de controle te geven over het leerproces, wordt hun nieuwsgierigheid geprikkeld en leren ze van en met elkaar.\nDoor het steunen van en samenwerken met gelijkgestemde organisaties zet de stichting CoderDojo Nijmegen zich in voor bewustwording en meer, beter en toegankelijker IT-onderwijs.\nWat doet CoderDojo Nijmegen? CoderDojo brengt kinderen in aanraking met IT. We laten jonge mensen zien hoe ze zelf een game of website kunnen bouwen. Zo kunnen kinderen op jonge leeftijd ontdekken of ze programmeren leuk vinden; ook als hun ouders geen IT-achtergrond hebben en er op de basisschool weinig aandacht voor is. Bij CoderDojo kunnen kinderen (ninja’s) in een vriendelijke omgeving experimenteren en ontdekken.\nCoderDojo Nijmegen organiseert maandelijks gratis IT workshops (Dojo’s) voor kinderen tussen 7 en 17 jaar. Tijdens die workshops bouwen de kinderen games, apps, websites en meer. De stichting is opgericht om naast de organisatie van workshops ook andere activiteiten te kunnen ontplooien. Zo maakt CoderDojo Nijmegen lesmateriaal dat ook bij andere CoderDojo’s kan worden gebruikt. Ook schaft CoderDojo Nijmegen materiaal (robots, computers, electronica) aan voor gebruik tijdens Dojo’s. Daarnaast kan de stichting andere Dojo’s ondersteunen met kennis en materiaal, zodat meer kinderen in aanraking kunnen komen met IT.\nBovenstaande is iets wat elk van de, ongeveer 1000, CoderDojo’s in de wereld probeert te doen. Daarnaast worden er internationale evenementen georganiseerd: bij EUDojo laten kinderen aan europarlementariërs zien hoe (belangrijk het is dat) zij leren programmeren.\nHet bestuur             Esther van Popta Leo Willems Bas Hopman Daan Willems Rianne Kooi   voorzitter penningmeester secretaris algemeen bestuurslid algemeen bestuurslid            Contactgegevens Stichting CoderDojo Nijmegen\nWaalbandijk 16 | Unit 40\n6541 AJ Nijmegen\nRSIN: 857425948\nBank: NL38 RABO 0317 6808 70\nEmail: 𝗌𝗍𝗂𝖼𝗁𝗍𝗂𝗇𝗀@𝖼𝗈𝖽𝖾𝗋𝖽𝗈𝗃𝗈-𝗇𝗂𝗃𝗆𝖾𝗀𝖾𝗇.𝗇𝗅\nDownloads Beleidsplan\nJaarverslag 2019\nStatuten\nHuishoudelijk Reglement\nProtocol Veiligheid\n","date":"February 9, 2020","permalink":"/stichting/","title":"Stichting CoderDojo Nijmegen"},{"categories":null,"contents":"Via de website coderdojo-nijmegen.nl worden privacygevoelige gegevens oftewel persoonsgegevens verwerkt.St. Coderdojo Nijmegen acht een zorgvuldige omgang met persoonsgegevens van groot belang. Persoonlijke gegevens worden door ons dan ook zorgvuldig verwerkt en beveiligd.\nBij onze verwerking houden wij ons aan de eisen die de Algemene Verordening Gegevensbescherming (AVG) stelt. Dat betekent onder andere dat wij:\n duidelijk vermelden met welke doeleinden wij uw persoonsgegevens verwerken. Dat doen wij via deze privacyverklaring; met derden een verwerkersovereenkomst aangaan waarin afspraken gemaakt worden over de persoonsgegevens die wij een hen doorgeven.  Voor beide geldt dat:\n de verzameling van persoonsgegevens zich beperkt zich tot alleen de persoonsgegevens die nodig zijn voor legitieme doeleinden; wij u eerst vragen om uitdrukkelijke toestemming om uw persoonsgegevens te verwerken in gevallen waarin uw toestemming is vereist; wij passende beveiligingsmaatregelen nemen om uw persoonsgegevens te beschermen en dat ook eisen van partijen die in onze opdracht persoonsgegevens verwerken; wij uw recht respecteren om uw persoonsgegevens op uw aanvraag ter inzage te bieden, te corrigeren of te verwijderen.  St. Coderdojo Nijmegen is de verantwoordelijke voor de gegevensverwerking. In deze privacyverklaring leggen wij uit welke persoonsgegevens wij verzamelen en gebruiken en met welk doel. Wij raden u aan deze zorgvuldig te lezen.\nGebruik van persoonsgegevens Door het gebruiken van onze dienst laat u bepaalde gegevens bij ons achter. Dat kunnen persoonsgegevens zijn. Wij bewaren en gebruiken uitsluitend de persoonsgegevens die rechtstreeks door u worden opgegeven, in het kader van de door u gevraagde dienst, of waarvan bij opgave duidelijk is dat ze aan ons worden verstrekt om te verwerken. Wij gebruiken uw volgende gegevens voor de in deze privacyverklaring genoemde doelen:\n Email adressen Cookies voor locatiebepaling (via Matomo) voor bezoek-statistiek (per land). Foto’s: als er foto’s worden gemaakt tijdens Coderdojo bijeenkomsten dan wordt ter plekke vooraf om toestemming gevraagd via een webpagina.  Verstrekking aan derden Wanneer u bij ons een reservering doet, maken wij voor de afhandeling daarvan gebruik van Eventbrite (www.eventbrite.com). Zij registreren persoonsgegevens ten behoeve van het maken van de reservering (email-adres en financiële gegeven in het geval van donaties).\nBeveiliging Wij nemen beveiligingsmaatregelen om misbruik van en ongeautoriseerde toegang tot persoonsgegevens te beperken. Wij houden statistieken bij op onze website, maar dit gebeurt te allen tijde geanonimiseerd.\nWebsites van derden Deze privacyverklaring is niet van toepassing op websites van derden die door middel van links met deze website zijn verbonden. Wij kunnen niet garanderen dat deze derden op een betrouwbare of veilige manier met uw persoonsgegevens omgaan. Wij raden u aan de privacyverklaring van deze websites te lezen alvorens van deze websites gebruik te maken.\nWijzigingen in deze privacyverklaring Wij behouden ons het recht voor om wijzigingen aan te brengen in deze privacyverklaring. Het verdient aanbeveling om deze privacyverklaring geregeld te raadplegen, zodat u van deze wijzigingen op de hoogte bent. Bij grote wijzigingen sturen we u een e-mail.\nInzage, wijzigen en verwijderen van uw gegevens Voor vragen over ons privacybeleid of vragen omtrent inzage, wijzigingen in (of verwijdering van) uw persoonsgegevens kunt u te allen tijde contact met ons opnemen via onderstaande gegevens:\nStichting CoderDojo Nijmegen\nWaalbandijk 16\n6541 AJ Nijmegen\n","date":"February 8, 2020","permalink":"/privacy/","title":"Privacy beleid"},{"categories":null,"contents":"CoderDojo\u0026rsquo;s draaien op de inzet van vrijwilligers die graag hun kennis delen of hun tijd willen inzetten om kinderen verder te helpen. Wil jij ons ook graag helpen? Dat kan absoluut! Ook als je niet technisch onderlegd bent kun je veel voor ons doen - er komt van alles kijken bij de organisatie van een dojo. Heb je interesse? Stuur dan een mailtje naar 𝗂𝗇𝖿𝗈@𝖼𝗈𝖽𝖾𝗋𝖽𝗈𝗃𝗈-𝗇𝗂𝗃𝗆𝖾𝗀𝖾𝗇.𝗇𝗅.\nWat zoeken we in een mentor? Allereerst: je hoeft zeker geen programmeur of IT’er te zijn om mentor te zijn bij een dojo.\nJe moet het wel leuk vinden om nieuwe onderwerpen onder de knie te krijgen, en daar ook wat tijd in willen en kunnen investeren. We richten ons op kinderen vanaf 7 jaar, wat wil zeggen dat een groot deel van het materiaal dat we aanbieden niet erg ingewikkeld is. Het belangrijkste is dat je met enige regelmaat (maximaal 1 x per maand) een zaterdag beschikbaar bent om te helpen bij de CoderDojo workshops.\nVeel mentoren hebben zelf ook iets aan hun hulp bij CoderDojo, bijvoorbeeld in hun werk, studie of thuissituatie. Het is dus niet erg als je niet alleen iets komt \u0026lsquo;brengen\u0026rsquo;, maar ook ‘halen’ bij CoderDojo. Integendeel: dit kan juist je plezier en motivatie vergroten. Mentoren hebben ook uiteenlopende interesses: de een bouwt het liefst websites, de ander digitale kunst, en weer een ander haalt vooral energie uit het begeleiden van de kinderen.\nAls mentor is het belangrijk dat je je prettig voelt in de omgang met mensen en met kinderen in het bijzonder. Geduld is daarbij essentieel (ook naar ouders). Bij de begeleiding is een van de lastigste dingen het inschatten wanneer je hulp moet bieden. De kunst is om niet te snel in te grijpen: de kinderen zijn aan het ontdekken en hoeven niet alles meteen te snappen. Soms zorgt dat ervoor dat je tijdens een Dojo weinig te doen hebt, dan hebben we ons ‘werk’ eigenlijk goed gedaan. Een enkele keer is het nodig om iemand aan te spreken op hun gedrag. Dat kan een deelnemer zijn of een ouder; ook binnen de mentorgroep is er - in goede sfeer - ruimte voor kritische opmerkingen.\nVeel van het materiaal dat we gebruiken is (oorspronkelijk) in het Engels, en onze deelnemers spreken niet altijd vloeiend Nederlands. Het is daarom handig (maar niet noodzakelijk) als je redelijk Engels spreekt en leest. Helemaal handig is het als je het daarnaast leuk vindt om lesmateriaal te vertalen of zelfs te maken.\nBij CoderDojo vinden we deelnemers en mentoren met verschillende achtergronden leuk en verwachten daarom dat je je als mentor prettig voelt in een diverse groep mensen.\nTot slot: bij CoderDojo Nijmegen proberen we een zo veilig mogelijke omgeving te bieden aan onze bezoekers. Een onderdeel daarvan is dat we voor al onze mentoren een Verklaring Omtrend Gedrag aanvragen.\nZie onze instructiepagina voor voorbeelden van onderwerpen die we behandelen. Op de teampagina kun je iets lezen over de huidige mentoren.\n","date":"February 6, 2020","permalink":"/meehelpen/","title":"Wil je vrijwilliger worden?"},{"categories":null,"contents":"We gaan met 2D game framework Löve2D het klassieke spel Snake bouwen.\n0. Voorbereiding  Download en installeer LÖVE: https://love2d.org Download en installeer Visual Studio Code: https://code.visualstudio.com/download  1. Introductie Vandaag gaan we aan de slag met het spel Snake. Begin met het downloaden van het materiaal en pak daarna de bestanden uit. Open daarna Visual Studio Code en sleep het mapje met de uitgepakte bestanden in het scherm van Visual Studio Code. Als het goed is zie je nu aan de linkerkant een lijstje met alle bestanden. Met deze bestanden gaan we straks aan de slag. Maar laten we eerst kijken naar de spelregels.\nSpelregels Het doel van het spel Snake is om zoveel mogelijk fruit te eten (dit is je score). Hoe meer je eet, hoe langer de slang wordt en ook beweegt de slang sneller. Als de slang tegen zichzelf botst of buiten het scherm gaat is het game over.\nDus om Snake te bouwen moet het spel het volgende doen:\n Beeweeg de slang met de pijltjestoetsen; Plaats op een willekeurige plek fruit; De slang moet het fruit kunnen eten;  Als er fruit gegeten is moet de slang sneller bewegen; Als er fruit gegeten is moet de slang langer worden; Als er fruit gegeten is krijg je een punt;   Als de slang tegen zichzelf botst is het game over; Ook als de slang buiten het scherm gaat is het game over;  Nu we de spelregels duidelijk hebben en weten wat het spel moet gaan doen, is het tijd om Snake te gaan bouwen!\n2. Aan de slag! We beginnen door het main.lua bestand te openen. Klik hierop in de lijst die je aan de linkerkant ziet. Als je het juiste bestand hebt geopend zie je de volgende code:\nextra = require \u0026quot;extrafuncties\u0026quot; function love.load() end function love.draw() end function love.update(dt) end function love.keypressed(key) end De zogenaamde functions (in het Nederlands functie(-s)) die je hier ziet worden uitgevoerd zodra zij nodig zijn. Zo is er een functie die love.load() heet, waarbinnen we de code zetten om bijvoorbeeld onze plaatjes te laden.\n3. Slangenkop Dus als we bijvoorbeeld de kop van de slang willen laden, typen we de volgende regel tussen function love.load() en de eerstvolgende end.\nslangKopPlaatje = love.graphics.newImage(\u0026quot;plaatjes/slangkop.png\u0026quot;)\nAls je het goed getypd hebt, ziet je code er zo uit:\nextra = require \u0026quot;extrafuncties\u0026quot; function love.load() slangKopPlaatje = love.graphics.newImage(\u0026quot;plaatjes/slangkop.png\u0026quot;) end function love.draw() end function love.update(dt) end function love.keypressed(key) end Als je goed kijkt zie je in het voorbeeld hierboven dat de regel iets verder staat dan alle andere tekst. Dit noemen we inspringen. Als programmeur gebruik je dit om je code beter leesbaar te maken. Je kunt dit zelf doen door je tekstcursor aan het begin van de regel te plaatsen en dan op de toets Tab te drukken.\nSla het programma nu op (Ctrl/Cmd + S). Als je op Windows werkt doe je nu het volgende:\n open een opdrachtprompt door \u0026ldquo;cmd\u0026rdquo; in te typen in het startmenu. voer het volgende commando uit: \u0026ldquo;c:\\Program Files\\LOVE\\love.exe\u0026rdquo; \u0026ldquo;c:\u0026lt;de_map_waar_jouw_programma_staat\u0026gt;\\love\\snake\u0026rdquo;  Als je op een Mac werkt:\n Start LÖVE sleep de map met je Lua-programma op het LÖVE-scherm.  Deze stap doe je vanaf nu elke keer als je iets hebt veranderd aan je programma en je wilt kijken wat er is veranderd.\nAls je een blauw scherm met een \u0026ldquo;Error\u0026rdquo; krijgt dan klopt er iets niet aan je code, controleer die nog een keer.\nWe hebben nu de slangenkop geladen, maar we zien hem nog niet. Hiervoor moeten we naar de love.draw() functie.\nOnder de regel function love.draw() typen we de volgende regel:\nlove.graphics.draw(slangKopPlaatje, 100, 50)\nAls we nu weer opslaan (Ctrl + S) en opnieuw laden zie je (als je de code goed hebt overgetypd) de kop van de slang!\n4. De rest van de slang De slang moet steeds langer worden, dus laten we daarom een stukje aan de slang toevoegen. Ook hier hebben we een plaatje voor nodig. Voeg de volgende regel toe aan de love.load() functie, onder de regel voor het slangKopPlaatje.\nslangLichaamPlaatje = love.graphics.newImage(\u0026quot;plaatjes/slanglichaam.png\u0026quot;)\nOok hier moeten het plaatje na het laden tekenen op het scherm. Dit doen we door de volgende regel toe te voegen aan de love.draw() functie, onder de regel voor het tekenen van het slangKopPlaatje.\nlove.graphics.draw(slangLichaamPlaatje, 50, 50)\nAls je nu het bestand opslaat en opnieuw laden zie je als het goed is nu twee plaatjes van de slang.\nAchtergrond Laten we het spel ook een achtergrondje geven. Dit gaat precies op dezelfde manier als het toevoegen van het slangKopPlaatje.\nIn de love.load() functie voeg je de volgende regel toe, boven het slangKopPlaatje:\nachtergrondPlaatje = love.graphics.newImage(\u0026quot;plaatjes/achtergrond.png\u0026quot;)\nDaarna voeg je deze regel toe aan de love.draw() functie, ook boven het slangKopPlaatje:\nlove.graphics.draw(achtergrondPlaatje)\n5. Bediening en beweging Om de slang te kunnen bewegen is het goed om te weten wanneer de slang moet bewegen. Bijvoorbeeld wanneer de pijltjestoetsen worden ingedrukt. De code voor de bediening zetten we in de love.keypressed(key) functie. Deze functie wordt uitgevoerd zodra je een knop indrukt. Laten we beginnen met te controleren of er een pijltjestoets is ingedrukt. Voeg de volgende twee regels toe aan de love.keypressed(key) functie.\nif key == \u0026quot;left\u0026quot; or key == \u0026quot;right\u0026quot; or key == \u0026quot;up\u0026quot; or key == \u0026quot;down\u0026quot; then end De eerste regel zegt eigenlijk het volgende Als toets links is, of toets rechts is, of toets boven is, of toets beneden is, dan.... Zie je de vergelijkenis?\nNet als bij functies, wordt op de tweede regel ook het woord end gebruikt. Dit wordt gebruikt om aan te geven dat alleen binnen if ... en end iets zal worden uitgevoerd. Hiertussen gaan we de volgende code zetten, altijd op een nieuwe regel.\nPosities, richting en keerpunten Nu we weten wanneer een pijltjestoets is ingedrukt, willen we de slang een andere richting op laten gaan. Dit doen we door een aantal waarden bij te houden. We houden de positie en de richting bij. Dit doen we in een object. Dit object geven we dan de naam nieuwKeerPunt.\nVoeg de volgende regels toe onder de if en boven de eerstvolgende end.\nnieuwKeerPunt = { positieX = 0, positieY = 0, richtingX = 0, richtingY = 0 } In nieuwKeerPunt houden we nu vier waarden bij - de positieX, positieY, richtingX en richtingY.\nDe positieX kan elke positie zijn op de x-as. Dat is dus van de linkerkant naar rechterkant van het scherm. De positieX 0 is helemaal aan de rechterkant. De rechterkant van het scherm is 800 (de breedte van het scherm). De positieY is de positie van boven naar beneden. Hier is 0 de bovenkant van het scherm en 600 de onderkant van het scherm.\nDe richtingX en de richtingY kan 0, -1 of 1 zijn. Als de richtingX -1 is, gaat de slang naar links. Als de richtingX 1 is gaat de slang naar rechts. En als de richtingX 0 is, gaat de slang niet naar rechts of naar links. De richtingY is precies hetzelfde maar dan voor de richting boven en beneden.\nNu staan alle waarden op 0. Maar dit is tijdelijk. We gaan nu kijken welke pijltjestoets is ingedrukt om de richting te veranderen.\nVoeg de volgende code toe onder de code waar we het nieuwKeerPunt hebben toegvoegd en boven de end van de if die we hiervoor hebben toegevoegd.\n if key == \u0026quot;left\u0026quot; then nieuwKeerPunt.richtingX = -1 nieuwKeerPunt.richtingY = 0 elseif key == \u0026quot;right\u0026quot; then nieuwKeerPunt.richtingX = 1 nieuwKeerPunt.richtingY = 0 elseif key == \u0026quot;up\u0026quot; then nieuwKeerPunt.richtingY = -1 nieuwKeerPunt.richtingX = 0 elseif key == \u0026quot;down\u0026quot; then nieuwKeerPunt.richtingY = 1 nieuwKeerPunt.richtingX = 0 end Deze code verandert nu de richting van het nieuwKeerPunt.\nNu moeten we nog de positie van het nieuwKeerPunt aanpassen. Hiervoor gebruiken we de positie van de kop van de slang. Hiervoor hebben we de volgende twee regels code nodig. Voeg deze toe onder de code die je net hebt toegevoegd. Dus tussen de end die hoort bij de laatste elseif en de eerstvolgende end.\n nieuwKeerPunt.positieX = slang[#slang].positieX nieuwKeerPunt.positieY = slang[#slang].positieY if not extra.bestaatKeerPunt(keerPunten, nieuwKeerPunt) then table.insert(keerPunten, nieuwKeerPunt) end Deze code verandert de positie van nieuwKeerPunt naar de positie van het laatste stukje van de slang. Daarna wordt er gecontroleerd of het nieuwKeerPunt al bestaat in het keerPunten object en hieraan toegevoegd als dat niet zo is. Nu bestaat het woord slang nog niet in de code, dus dat zal foutmeldingen opleveren.\nHiervoor moeten we terug naar de love.load() functie. We kunnen dit woord (slang) niet in de love.keypressed(key) functie zetten omdat deze functie elke keer als er op een toets gedrukt wordt, wordt uitgevoerd. Dit zou betekenen dat het woord slang op elke toets vernieuwd wordt. Maar dat willen we niet. We willen hier alle stukjes van de slang gaan bijhouden. Dus, scroll naar boven, naar de love.load() functie.\nVoeg de volgende regel toe aan de love.load() functie - op een nieuwe regel onder love.load().\nslang = {}\nDeze regel maakt een leeg object met de naam slang.\nIn de love.keypressed(key) functie hebben we het nieuwKeerPunt de positie van het laatste stukje van de slang gegeven. Alleen de positie van de slang bestaat nog niet. Om deze toe te voegen. Moeten we een aantal stukjes toevoegen aan het slang object. Sla een regel over en voeg de volgende regels toe onder de vorige code.\n for i = 1, 2 do slangStukje = { positieX = 5+1*i, positieY = 5, richtingX = 1, richtingY = 0 } table.insert(slang, slangStukje) end kop = slang[#slang] Deze code voegt stukjes van de slang toe aan het slang object. Bovenaan zie je for i = 1, 2 do staan. Net als bij de if wordt ook for een end. Als je code tussen for en end zet, wordt deze code 2 keer uitgevoerd. Dus in dit geval worden er 2 stukjes van de slang toegevoegd aan het slang object. De laatste functie table.insert(slang, slangStukje) voegt het stukje toe aan het slang object. En de laatste regel geeft aan waar de kop van de slang zit (het laatste stukje).\nEerder maakten we een nieuwKeerPunt aan (in de love.keypressed(key) functie). Ook nieuwKeerPunt wordt toegevoegd aan een object. Het verschil tussen het slang object is, dat het nieuwKeerPunt wordt toegevoegd elke keer als je een pijltjestoets indrukt. Maar ook hier missen we het object waaraan het toegevoegd moet worden, het keerPunten object.\nDaarom voegen we de volgende regel toe onder wat we zonet hebben toegevoegd:\nkeerPunten = {}\nTekenen op de positie van een slangstukje Nu houden we de positie bij van twee slangstukjes, maar we gebruiken deze posities nog niet om hier een plaatje te tekenen. Voor het tekenen van plaatjes moeten we weer terug naar beneden scrollen, naar de love.draw() functie.\nOm de positie te gebruiken om een stukje te tekenen moeten we de twee regels die we in de love.draw() functie hebben gezet vervangen door de volgende code (zorg er voor dat deze code onder love.draw() en boven end staat):\n for k, slangStukje in pairs(slang) do if k == #slang then love.graphics.draw(slangKopPlaatje, slangStukje.positieX*slangKopPlaatje:getWidth(), slangStukje.positieY*slangKopPlaatje:getHeight()) else love.graphics.draw(slangLichaamPlaatje, slangStukje.positieX*slangLichaamPlaatje:getWidth(), slangStukje.positieY*slangLichaamPlaatje:getHeight()) end end Als je de code juist hebt toegevoegd, het bestand hebt opgeslagen (Ctrl + S) en opnieuw hebt geladen, zou je nu de slang ongeveer in het midden van het scherm moeten zien.\nBewegen Nu is het tijd om de slang daadwerkelijk te laten bewegen. Hiervoor moeten we naar de functie love.update(dt). Deze functie zorgt er voor alles wordt berekend. Dus ook de beweging moet berekend worden. Voeg de volgende regels toe aan de love.update(dt) functie:\n if not gameOver and tellerSlang \u0026gt; tijdSlang then beweegSlang() extra.controleerKeerPunten(keerPunten, slang) tellerSlang = 0 end tellerSlang = tellerSlang + dt Aan de love.load() moet je de volgende regels toevoegen. Doe dit onderaan in de love.load() functie, boven de end.\n tijdSlang = 1 tellerSlang = 0 gameOver = false In de love.update(dt) functie mist alleen nog de beschrijving van de functie beweegSlang(). Deze moeten we zelf schrijven. Dit doen we helemaal onderaan. Op een nieuwe regel voeg je de volgende regels toe:\nfunction beweegSlang() for k, slangStukje in pairs(slang) do for k, keerPunt in pairs(keerPunten) do if slangStukje.positieX == keerPunt.positieX and slangStukje.positieY == keerPunt.positieY then slangStukje.richtingX = keerPunt.richtingX slangStukje.richtingY = keerPunt.richtingY end end slangStukje.positieX = slangStukje.positieX + slangStukje.richtingX slangStukje.positieY = slangStukje.positieY + slangStukje.richtingY end end Als je deze code opslaat en het programma opnieuw laadt zal de slang nu langzaam over het scherm bewegen!\n6. Fruit Fruit plaatsen Nu de slang kan bewegen, kunnen we hem fruit laten eten. Laten we hiervoor teruggaan naar de love.load() functie en een fruit object aanmaken. Dit doen we door de volgende regels toe te voegen, waar je wilt, in de love.load() functie:\nfruit = {} tellerFruit = 0 tijdFruit = 3 appelPlaatje = love.graphics.newImage(\u0026quot;plaatjes/appel.png\u0026quot;) Nu we alle waarden en het plaatje hebben geladen moeten we ergens het fruit object vullen met fruit. Dit doen we in de love.update(dt) functie.\n if not gameOver and tellerFruit \u0026gt; tijdFruit then plaatsFruit() tellerFruit = 0 end tellerFruit = tellerFruit + dt Nu hoeven we alleen nog de missende, plaatsFruit() functie maken. Net als bij de beweegSlang() functie, plaatsen we de plaatsFruit() functie helemaal onderaan. Voeg deze code toe:\nfunction plaatsFruit() nieuwFruit = { positieX = math.random(0, math.floor(love.graphics.getWidth()/appelPlaatje:getWidth())), positieY = math.random(0, math.floor(love.graphics.getHeight()/appelPlaatje:getHeight())) } table.insert(fruit, nieuwFruit) end Deze functie voegt op een willekeurige plaats een stuk fruit toe. We zien alleen het fruit nog niet op het scherm verschijnen. Hiervoor moeten we terug naar de love.draw() functie. De volgorde van je code in de love.draw() functie bepaald wat er eerst getekend moet worden. Dus als we de appels onder de slang willen tekenen, moeten we de volgende code, boven de code van de slang plaatsen (binnen de love.draw() functie):\n for k, stukFruit in pairs(fruit) do love.graphics.draw(appelPlaatje, stukFruit.positieX*appelPlaatje:getWidth(), stukFruit.positieY*appelPlaatje:getHeight()) end Als nu opslaan en het programma opnieuw laden, zien we nu appels verschijnen op het scherm. Omdat tijdFruit 3 is, wordt er elke 3 seconden een appel toegevoegd.\nFruit eten Als we nu met de slang over een stukje fruit bewegen, gebeurd er niets. Maar we willen dus het fruit opeten. Hiervoor moeten we weer zelf een functie schrijven, de functie eetFruit(). Voeg deze code toe, helemaal onderaan:\nfunction eetFruit() for k, stukFruit in pairs(fruit) do if stukFruit.positieX == kop.positieX and stukFruit.positieY == kop.positieY then table.remove(fruit, k) score = score + 1 tijdSlang = tijdSlang * 0.9 maakSlangLanger() end end end Voeg daarna de volgende regel toe, na extra.controleerKeerPunten(keerPunten, slang), in de love.update(dt) functie:\neetFruit()\nAls de eetFruit() functie wordt uitgevoerd, gebeuren er een aantal dingen:\n Het fruit wordt verwijderd - table.remove(fruit, k) Je krijgt een score - score = score + 1 De slang gaat sneller bewegen - tijdSlang = tijdSlang * 0.9 En de slang wordt langer - maakSlangLanger()  De laatste functie ontbreekt nog, de maakSlangLanger() functie. Voeg deze toe, ook helemaal onderaan:\nfunction maakSlangLanger() staartStukje = slang[1] nieuwSlangStukje = { positieX = staartStukje.positieX-staartStukje.richtingX, positieY = staartStukje.positieY-staartStukje.richtingY, richtingX = staartStukje.richtingX, richtingY = staartStukje.richtingY } table.insert(slang, 1, nieuwSlangStukje) end Deze code voegt een stukje van de slang toe, waar de staart is. Dit stukje wordt dan toegevoegd aan het slang object, waar zich ook alle andere stukjes bevinden.\n7. Score Als we nu onze code zouden uitvoeren, zouden we een foutmelding krijgen omdat het score object nog niet bestaat. Deze moeten we nog toevoegen aan de love.load() functie. Dus voeg de volgende regel toe aan je love.load() functie, op een nieuwe regel:\nscore = 0\nEn om de score op het scherm te tonen, voegen we de volgende regel toe aan de love.draw() functie:\nlove.graphics.print(score .. \u0026quot; punten\u0026quot;)\nAls we nu de code opslaan en opnieuw laden, zal de slang steeds langer worden en sneller gaan zodra je meer appels eet.\n8. Game Over Het spel mist nu alleen nog twee spelregels. Je moet game over gaan als de slang tegen zichzelf botst of buiten het scherm gaat.\nOm dit te controleren maken we nog één functie. Voeg deze code toe, helemaal onderaan:\nfunction controleerGameOver() if kop.positieX \u0026lt; 0 or kop.positieX \u0026gt; math.floor(love.graphics.getWidth()/slangKopPlaatje:getWidth()) or kop.positieY \u0026lt; 0 or kop.positieY \u0026gt; math.floor(love.graphics.getHeight()/slangKopPlaatje:getHeight()) then gameOver = true end for k, slangStukje in pairs(slang) do if slangStukje ~= kop and kop.positieX == slangStukje.positieX and kop.positieY == slangStukje.positieY then gameOver = true end end end Voeg daarna de volgende regel toe na eetFruit() in de love.update(dt) functie:\ncontroleerGameOver()\nEn tot slot voegen we de volgende regels toe aan het einde van de love.draw() functie om een bericht te tonen dat je game over bent:\n if gameOver then love.graphics.print(\u0026quot;Game Over!\u0026quot;, love.graphics.getWidth()/2, love.graphics.getHeight()/2) end Goed gedaan! En dat is het, je hebt het spel Snake gebouwd! Hoe lang hou jij het vol en wat is de hoogste score die je kunt krijgen?\nHeb je iets niet goed begrepen, vraag het dan aan één van de mentoren, we helpen je natuurlijk graag!\nJe kunt ook altijd een kijkje nemen bij de andere kinderen, misschien kan jij hun helpen!\nLicentie Deze instructies worden, net als alle andere instructies van CoderDojo Nijmegen, aangeboden onder een Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International Licentie.  ","date":"February 6, 2020","permalink":"/instructies/love2d-snake/","title":"Löve2D - Snake"},{"categories":null,"contents":"Welkom bij CoderDojo Nijmegen WIFI          netwerk CoderDojoWifi2.4GHz   wachtwoord 4Ninjas!   server http://coderdojo.server   installatiebestanden installatiebestanden    ","date":"January 1, 0001","permalink":"/index-mcs/","title":""},{"categories":null,"contents":"Wat gaan we doen? Het is vakantie, ook voor de computers. We gaan weer unplugged met in ieder geval het levend programmeren, RoboRally en de Turing Tumble, een computer die op knikkers werkt!\nVoorbereiding Vergeet niet je goede humeur mee te nemen, de laptop mag deze maand thuis blijven.\nAlgemene info Kinderen vanaf 7 jaar kunnen gratis meedoen aan CoderDojo. Het enige wat je nodig hebt om mee te kunnen doen is een laptop met werkende wifi waarop je software mag installeren. Ben je 12 jaar of jonger? Dan vragen we je om één van je ouders mee te nemen om je te begeleiden tijdens de dojo. Verder kan het verstandig zijn om wat te eten mee te nemen, van programmeren krijg je namelijk hongerrrr!\nOm zeker te weten dat we over voldoende spullen beschikken, moet je van tevoren ook even reserveren. Je hebt slechts één ticket per kind nodig. Ouders hoeven geen ticket te reserveren. Denk er wel even aan om je ticket mee te nemen naar CoderDojo (mag digitaal).\nNo show? Ben je de dag zelf verhinderd, laat het dan op tijd weten! Zo kunnen we mensen op de wachtlijst uitnodigen of besluiten één van de mentoren een vrije zaterdag te gunnen. Bij herhaaldelijk niet opdagen zonder afmelding halen we je van de mailinglijst.\n","date":"January 1, 0001","permalink":"/dojos/67-unplugged/","title":"#67 Unplugged"},{"categories":null,"contents":"Wat gaan we doen? Deze maand mogen de robots hun kunsten weer vertonen. We gaan in ieder geval aan de slag met de micro:Maqueen, een veelzijdig robotje met een micro:bit als hersenen. Hopelijk is ook de mBot weer van de partij. Beide robots zijn te programmeren met een Scratch-achtige taal en met \u0026ldquo;echte\u0026rdquo; code - voor elk wat wils dus.\nVoorbereiding Neem een laptop mee, en installeer om snel aan de slag te kunnen de micro:bit offline app en het mBlock programma op.\nCorona We zijn natuurlijk blij dat we weer bij elkaar kunnen komen, wel zijn er de nodige richtlijnen om rekening mee te houden. Onze collega\u0026rsquo;s in Alphen a/d Rijn hebben een duidelijk overzicht gemaakt, kijk hier vooral even naar!\nAlgemene info Kinderen vanaf 7 jaar kunnen gratis meedoen aan CoderDojo. Het enige wat je nodig hebt om mee te kunnen doen is een laptop met werkende wifi waarop je software mag installeren. Ben je 12 jaar of jonger? Dan vragen we je om één van je ouders mee te nemen om je te begeleiden tijdens de dojo. Verder kan het verstandig zijn om wat te eten mee te nemen, van programmeren krijg je namelijk hongerrrr!\nOm zeker te weten dat we over voldoende spullen beschikken, moet je van tevoren ook even reserveren. Je hebt slechts één ticket per kind nodig. Ouders hoeven geen ticket te reserveren. Denk er wel even aan om je ticket mee te nemen naar CoderDojo (mag digitaal).\nNo show? Ben je de dag zelf verhinderd, laat het dan op tijd weten! Zo kunnen we mensen op de wachtlijst uitnodigen of besluiten één van de mentoren een vrije zaterdag te gunnen. Bij herhaaldelijk niet opdagen zonder afmelding halen we je van de mailinglijst.\n","date":"January 1, 0001","permalink":"/dojos/68-robots/","title":"#68 Robots"},{"categories":null,"contents":"","date":"January 1, 0001","permalink":"/instructiesdoorzoeken/","title":"Instructies doorzoeken"},{"categories":null,"contents":"","date":"January 1, 0001","permalink":"/zoeken/","title":"Zoeken"}]